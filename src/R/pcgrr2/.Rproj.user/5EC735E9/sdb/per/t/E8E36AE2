{
    "collab_server" : "",
    "contents" : "library(BSgenome.Hsapiens.UCSC.hg19)\nlibrary(magrittr)\nlibrary(deconstructSigs)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(rlogging)\n\n#' Function that transforms a tier-structured variant data frame into a MAF-like data frame (for input to 2020plus, MutSigCV)\n#'\n#' @param tier_df data frame with somatic mutations\n#' @return maf_df\n#'\n#'\n\ntier_to_maf <- function(tier_df){\n  maf_df <- dplyr::select(tier_df, SYMBOL, GENOMIC_CHANGE, VCF_SAMPLE_ID, CONSEQUENCE, VARIANT_CLASS)\n  maf_df$Hugo_Symbol <- maf_df$SYMBOL\n  locus_info <- dplyr::select(tidyr::separate(maf_df,GENOMIC_CHANGE, c('chrom','pos','alleles'),sep=\":\",convert=T), chrom, pos, alleles)\n  locus_info <- tidyr::separate(locus_info,alleles, c('ref','alt'),sep=\">\",convert=T)\n  locus_info$chrom <- stringr::str_replace(locus_info$chrom, pattern = \"g\\\\.chr\", replacement = '')\n  maf_df$Chromosome <- locus_info$chrom\n  maf_df$Reference_Allele <- locus_info$ref\n  maf_df$Tumor_Seq_Allele2 <- locus_info$alt\n  maf_df$Start_Position <- locus_info$pos\n  maf_df$End_Position <- maf_df$Start_Position + nchar(maf_df$Reference_Allele) - 1\n  maf_df$Tumor_Sample_Barcode <- maf_df$VCF_SAMPLE_ID\n  maf_df$NCBI_Build <- 'GRCh37'\n\n  maf_df$Variant_Classification <- character(nrow(maf_df))\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"^(splice_acceptor_variant|splice_donor_variant|transcript_ablation|exon_loss_variant)\"),]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"^(splice_acceptor_variant|splice_donor_variant|transcript_ablation|exon_loss_variant)\"),]$Variant_Classification <- 'Splice_Site'\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"stop_gained\"),]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"stop_gained\"),]$Variant_Classification <- 'Nonsense_Mutation'\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"frameshift_variant\") & maf_df$VARIANT_CLASS == 'deletion',]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"frameshift_variant\") & maf_df$VARIANT_CLASS == 'deletion',]$Variant_Classification <- 'Frame_Shift_Del'\n  }\n  if(nrow( maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"frameshift_variant\") & maf_df$VARIANT_CLASS == 'insertion',]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"frameshift_variant\") & maf_df$VARIANT_CLASS == 'insertion',]$Variant_Classification <- 'Frame_Shift_Ins'\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"stop_lost\"),]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"stop_lost\"),]$Variant_Classification <- 'Nonstop_Mutation'\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"initiator_codon_variant|start_lost\"),])){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"initiator_codon_variant|start_lost\"),]$Variant_Classification <- 'Translation_Start_Site'\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"inframe_insertion\") & maf_df$VARIANT_CLASS == 'insertion',]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"inframe_insertion\") & maf_df$VARIANT_CLASS == 'insertion',]$Variant_Classification <- 'In_Frame_Ins'\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"inframe_deletion\") & maf_df$VARIANT_CLASS == 'deletion',]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"inframe_deletion\") & maf_df$VARIANT_CLASS == 'deletion',]$Variant_Classification <- 'In_Frame_Del'\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"^(missense_variant|coding_sequence_variant|conservative_missense_variant|rare_amino_acid_variant)\"),]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"^(missense_variant|coding_sequence_variant|conservative_missense_variant|rare_amino_acid_variant)\"),]$Variant_Classification <- 'Missense_Mutation'\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"3_prime_UTR_variant\"),]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"3_prime_UTR_variant\"),]$Variant_Classification <- \"3'UTR\"\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"5_prime_UTR_variant\"),]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"5_prime_UTR_variant\"),]$Variant_Classification <- \"5'UTR\"\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"^(TF_binding_site_variant|regulatory_region_variant|regulatory_region|intergenic_variant|intergenic_region)\"),]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"^(TF_binding_site_variant|regulatory_region_variant|regulatory_region|intergenic_variant|intergenic_region)\"),]$Variant_Classification <- \"IGR\"\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"^(incomplete_terminal_codon_variant|synonymous_variant|stop_retained_variant|NMD_transcript_variant)\"),]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"^(incomplete_terminal_codon_variant|synonymous_variant|stop_retained_variant|NMD_transcript_variant)\"),]$Variant_Classification <- \"Silent\"\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"^(mature_miRNA_variant|exon_variant|non_coding_exon_variant|non_coding_transcript_exon_variant|non_coding_transcript_variant|nc_transcript_variant)\"),]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"^(mature_miRNA_variant|exon_variant|non_coding_exon_variant|non_coding_transcript_exon_variant|non_coding_transcript_variant|nc_transcript_variant)\"),]$Variant_Classification <- \"RNA\"\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"^(transcript_amplification|intron_variant|INTRAGENIC|intragenic_variant)\"),]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"^(transcript_amplification|intron_variant|INTRAGENIC|intragenic_variant)\"),]$Variant_Classification <- \"Intron\"\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"downstream_gene_variant\"),]) > 0){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"downstream_gene_variant\"),]$Variant_Classification <- \"3'Flank\"\n  }\n  if(nrow(maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"upstream_gene_variant\"),])){\n    maf_df[stringr::str_detect(maf_df$CONSEQUENCE,\"upstream_gene_variant\"),]$Variant_Classification <- \"5'Flank\"\n  }\n\n  maf_df <- dplyr::select(maf_df, Hugo_Symbol, Chromosome, NCBI_Build, Start_Position, End_Position, Reference_Allele, Tumor_Seq_Allele2, Tumor_Sample_Barcode, Variant_Classification)\n  chrom_order <- c(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"X\",\"Y\")\n  maf_df$Chromosome <- factor(maf_df$Chromosome, levels = chrom_order)\n  maf_df <- dplyr::arrange(maf_df, Chromosome, Start_Position, End_Position)\n  return(maf_df)\n}\n\n\n#' Function that retrieves relative estimates of known somatic signatures from a single tumor\n#'\n#' @param mut_data data frame with somatic mutations (VCF_SAMPLE_ID, CHROM, POS, REF, ALT)\n#' @param sample_name sample name\n#' @param signatures_limit max number of contributing signatures\n#'\n#'\nsignature_contributions_single_sample <- function(mut_data, sample_name, signatures_limit = 6){\n  n_muts = nrow(mut_data)\n  rlogging::message(paste0(\"Identifying weighted contributions of known mutational signatures using deconstructSigs (n = \",n_muts,\" SNVs)\"))\n  sigs.input <- deconstructSigs::mut.to.sigs.input(mut.ref = mut_data, sample.id = \"VCF_SAMPLE_ID\",chr = \"CHROM\",pos = \"POS\", ref = \"REF\", alt = \"ALT\")\n  sample_1 <- deconstructSigs::whichSignatures(tumor.ref = sigs.input, sample.id = sample_name, signatures.limit = signatures_limit, signatures.ref = signatures.cosmic,contexts.needed = T,tri.counts.method = 'exome')\n  nonzero_signatures <- sample_1$weights[which(colSums(sample_1$weights != 0) > 0)]\n  n <- 1\n  signature_contributions_df <- NULL\n  while(n <= ncol(nonzero_signatures)){\n    df <- data.frame(\"sample_name\" = sample_name, \"signature_id\" = stringr::str_replace(colnames(nonzero_signatures)[n],\"ignature\\\\.\",\"\"), \"weight\" = as.numeric(nonzero_signatures[,n]))\n    signature_contributions_df <- rbind(signature_contributions_df,df)\n    rlogging::message(paste0(\"Inferred weighted contribution of \",df$signature_id,\": \",round(df$weight,digits = 3)))\n    n <- n + 1\n  }\n  signature_contributions_df <- rbind(signature_contributions_df, data.frame(\"sample_name\" = sample_name, \"signature_id\" = \"unknown\", \"weight\" = sample_1$unknown))\n  return(list(which_signatures_obj = sample_1, which_signatures_df = signature_contributions_df))\n}\n\n#' Function that generates cancer genome report\n#'\n#' @param project_directory name of project directory\n#' @param query_vcf name of VCF file with annotated query SNVs/InDels\n#' @param cnv_segments_tsv name of CNV segments file (tab-separated values)\n#' @param sample_name sample identifier\n#' @param signatures-limit Number of signatures to limit mutational signature analysis\n#' @param print_biomarkers Logical indicating if biomarker data is to be written to file\n#' @param print_tier_variants Logical indicating if tiered variant data is to be written to file\n#' @param print_mutational_signatures Logical indicating if mutational signature data is to be written to file\n#' @param print_cnv_segments Logical indicating if annotated cnv segment data is to be written to file\n#' @param print_html_report Logical indicating if HTML report is to be printed\n#'\n#' @return p\n#'\n\ngenerate_pcg_report <- function(project_directory, query_vcf, cnv_segments_tsv = NULL, sample_name = 'SampleX', signatures_limit = 6, print_biomarkers = TRUE, print_tier_variants = TRUE, print_mutational_signatures = TRUE, print_cnv_segments = TRUE, print_maf = TRUE, print_html_report = TRUE){\n  sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)\n  report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)\n  report_data$sample_name <- sample_name\n\n  cnv_report_tsgene_loss <- FALSE\n  cnv_report_oncogene_gain <- FALSE\n  cnv_report_biomarkers <- FALSE\n  cnv_report_segments <- FALSE\n\n  tier_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.tiers.tsv')\n  msig_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.mutational_signatures.tsv')\n  biomarker_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.biomarkers.tsv')\n  cnv_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.cnv_segments.tsv')\n  maf_fname <- paste0(project_directory, '/',sample_name,'.pcgr.maf')\n\n  if(!is.null(cnv_segments_tsv)){\n    if(file.exists(cnv_segments_tsv)){\n      cnv_data <- pcgrr2::cnv_segment_annotation(cnv_segments_tsv, format='tcga')\n      if(nrow(cnv_data$ranked_segments) > 0){\n        cnv_report_segments <- TRUE\n      }\n      if(nrow(cnv_data$tsgene_homozygous_deletion) > 0){\n        cnv_report_tsgene_loss <- TRUE\n      }\n      if(nrow(cnv_data$oncogene_amplified) > 0){\n        cnv_report_oncogene_gain <- TRUE\n      }\n      if(nrow(cnv_data$cnv_df_for_print) > 0 & print_cnv_segments == TRUE){\n        write.table(cnv_data$cnv_df_for_print,file=cnv_tsv_fname,col.names = T,row.names = F,quote=F,sep=\"\\t\")\n        gzip_command <- paste0('gzip -f ',cnv_tsv_fname)\n        system(gzip_command, intern=F)\n      }\n      if(!is.null(cnv_data$cna_biomarkers)){\n        if(nrow(cnv_data$cna_biomarkers) > 0){\n          cnv_report_biomarkers <- TRUE\n        }\n      }\n    }\n  }\n\n  if(!is.null(report_data$tsv_variants) & print_tier_variants == TRUE){\n    write.table(report_data$tsv_variants,file=tier_tsv_fname, sep=\"\\t\",col.names = T,row.names = F,quote = F)\n  }\n  if(!is.null(report_data$tsv_biomarkers) & print_biomarkers == TRUE){\n    write.table(report_data$tsv_biomarkers,file=biomarker_tsv_fname, sep=\"\\t\",col.names = T,row.names = F,quote = F)\n  }\n\n  if(!is.null(report_data$signature_data) & print_mutational_signatures == TRUE){\n    if(length(report_data$signature_data) > 1){\n      sample_mutational_signatures <- report_data$signature_data$signatures_cancertypes_aetiologies\n      sample_mutational_signatures$SampleID <- sample_name\n      sample_mutational_signatures <- dplyr::select(sample_mutational_signatures,-Comments)\n      write.table(sample_mutational_signatures,file=msig_tsv_fname, sep=\"\\t\",col.names = T,row.names = F,quote = F)\n    }\n  }\n\n  if(!is.null(report_data$maf_df) & print_maf == TRUE){\n    write.table(report_data$maf_df,file=maf_fname, sep=\"\\t\",col.names = T,row.names = F,quote = F)\n  }\n\n  tier1_report <- FALSE\n  tier2_report <- FALSE\n  tier3_report <- FALSE\n  tier4_report <- FALSE\n  tier5_report <- FALSE\n  signature_report <- FALSE\n  missing_signature_data <- FALSE\n\n  tier1_report <- report_data$tier1_report\n  tier2_report <- report_data$tier2_report\n  tier3_report <- report_data$tier3_report\n  tier4_report <- report_data$tier4_report\n  tier5_report <- report_data$tier5_report\n  signature_report <- report_data$signature_report\n  if(signature_report == FALSE){\n    missing_signature_data <- TRUE\n  }\n  show_data_sources <- TRUE\n\n  if(print_html_report == TRUE){\n    rmarkdown::render(system.file(\"templates\",\"report.Rmd\", package=\"pcgrr2\"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, params = list(signature_report = signature_report, tier1_report = tier1_report, tier2_report = tier2_report, tier3_report = tier3_report, tier4_report = tier4_report, tier5_report = tier5_report, cnv_report_tsgene_loss = cnv_report_tsgene_loss, cnv_report_oncogene_gain = cnv_report_oncogene_gain, cnv_report_segments = cnv_report_segments, cnv_report_biomarkers = cnv_report_biomarkers, show_data_sources = show_data_sources),quiet=T)\n  }\n\n}\n\n#' Function that annotates CNV segment files (FACETS)\n#'\n#' @param cnv_file CNV file name\n#' @param format CNV call format\n#'\n#' @return cnv_data\n#'\n\ncnv_segment_annotation <- function(cnv_file, format = 'tcga_legacy', logR_amplification_threshold = 0.8, logR_deletion_threshold = -0.8){\n\n  cnv_df <- read.table(file=cnv_file,header = T,stringsAsFactors = F,comment.char=\"\", quote=\"\")\n  cnv_df <- dplyr::rename(cnv_df, chromosome = Chromosome, LogR = Segment_Mean, segment_start = Start, segment_end = End) %>% dplyr::distinct()\n  cnv_df$chromosome <- paste0(\"chr\",cnv_df$chromosome)\n  cnv_df$cnTotal <- NA\n  cnv_df$cnMinor <- NA\n  cnv_df$cf <- NA\n\n  if(nrow(cnv_df[cnv_df$chromosome == 'chr23',])){\n    cnv_df[cnv_df$chromosome == 'chr23',]$chromosome <- 'chrX'\n  }\n  if(nrow(cnv_df[cnv_df$chromosome == 'chr24',])){\n    cnv_df[cnv_df$chromosome == 'chr24',]$chromosome <- 'chrY'\n  }\n\n  cnv_gr <- GenomicRanges::makeGRangesFromDataFrame(cnv_df, keep.extra.columns = T, seqinfo = seqinfo_hg19, seqnames.field = 'chromosome',start.field = 'segment_start', end.field = 'segment_end', ignore.strand = T, starts.in.df.are.0based = T)\n\n  hits <- GenomicRanges::findOverlaps(cnv_gr, pcgr_data$ensembl_genes_gr, type=\"any\", select=\"all\")\n  ranges <- ensembl_genes_gr[subjectHits(hits)]\n  mcols(ranges) <- c(mcols(ranges),mcols(cnv_gr[queryHits(hits)]))\n\n  df <- as.data.frame(mcols(ranges))\n  df$segment_start <- start(ranges(cnv_gr[queryHits(hits)]))\n  df$segment_end <- end(ranges(cnv_gr[queryHits(hits)]))\n  df$segment_length <- paste(round((as.numeric((df$segment_end - df$segment_start)/1000000)),digits = 2),\"Mb\")\n\n  df$transcript_start <- start(ranges)\n  df$transcript_end <- end(ranges)\n  df$chrom <- as.character(seqnames(ranges))\n  df <- as.data.frame(df %>% dplyr::rowwise() %>% dplyr::mutate(transcript_overlap_percent = min(100,round(as.numeric((segment_end - segment_start)/(transcript_end - transcript_start)) * 100,digits=1))))\n\n  df$segment_link <- paste0(\"<a href='\",paste0('http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg19&position=',paste0(df$chrom,':',df$segment_start,'-',df$segment_end)),\"' target=\\\"_blank\\\">\",paste0(df$chrom,':',df$segment_start,'-',df$segment_end),\"</a>\")\n  df_print <- df\n  df_print <- dplyr::select(df_print,chrom,segment_start,segment_end,segment_length,LogR,ensembl_gene_id,symbol,ensembl_transcript_id,transcript_start,transcript_end,transcript_overlap_percent,name,gene_biotype,cancer_census_germline,cancer_census_somatic,tsgene,ts_oncogene,intogen_drivers,antineoplastic_drugs_dgidb,gencode_v19)\n\n\n  chrOrder <- c(as.character(paste0('chr',c(1:22))),\"chrX\",\"chrY\")\n  df_print$chrom <- factor(df_print$chrom, levels=chrOrder)\n  df_print <- df_print[order(df_print$chrom),]\n  df_print$segment_start <- as.integer(df_print$segment_start)\n  df_print$segment_end <- as.integer(df_print$segment_end)\n\n  df_print_sorted <- NULL\n  for(chrom in chrOrder){\n    if(nrow(df_print[df_print$chrom == chrom,]) > 0){\n      chrom_regions <- df_print[df_print$chrom == chrom,]\n      chrom_regions_sorted <- chrom_regions[with(chrom_regions, order(segment_start, segment_end)),]\n      df_print_sorted <- rbind(df_print_sorted, chrom_regions_sorted)\n    }\n  }\n\n  df <- dplyr::select(df, -ensembl_transcript_id) %>% dplyr::filter(gene_biotype == 'protein_coding') %>% dplyr::distinct()\n  df$cancer_census_somatic <- stringr::str_replace_all(df$cancer_census_somatic,\"&\",\", \")\n\n  df <- dplyr::rename(df, ANTINEOPLASTIC_DRUG_INTERACTION = antineoplastic_drugs_dgidb)\n  df$VAR_ID <- rep(1:nrow(df))\n  df <- pcgrr2::annotate_variant_link(df, vardb = 'DGIDB')\n  df <- dplyr::rename(df, ONCOGENE = ts_oncogene, TUMOR_SUPPRESSOR = tsgene, ENTREZ_ID = entrezgene, CANCER_CENSUS_SOMATIC = cancer_census_somatic, GENE = symbol, CHROMOSOME = chrom, GENENAME = name, ANTINEOPLASTIC_DRUG_INTERACTIONS = DGIDBLINK, SEGMENT_LENGTH = segment_length, SEGMENT = segment_link)\n  df <- pcgrr2::annotate_variant_link(df, vardb = 'NCBI_GENE')\n  df <- dplyr::rename(df, GENE_NAME = NCBI_GENE_LINK)\n\n  df <- dplyr::select(df, CHROMOSOME, GENE, GENE_NAME, CANCER_CENSUS_SOMATIC, TUMOR_SUPPRESSOR, ONCOGENE, ANTINEOPLASTIC_DRUG_INTERACTIONS,SEGMENT_LENGTH, SEGMENT, LogR) %>% dplyr::distinct()\n  df <- df %>% dplyr::distinct()\n\n  segments <- NULL\n  segments <- dplyr::select(df, SEGMENT, SEGMENT_LENGTH, LogR) %>% dplyr::distinct()\n  segments <- segments %>% dplyr::arrange(desc(LogR))\n\n  oncogene_amplified <- NULL\n  oncogene_amplified <- dplyr::filter(df, !is.na(ONCOGENE) & (logR >= logR_amplification_threshold))\n  oncogene_amplified <- dplyr::select(oncogene_amplified, -c(TUMOR_SUPPRESSOR, ONCOGENE))\n  oncogene_amplified <- oncogene_amplified %>% dplyr::arrange(ANTINEOPLASTIC_DRUG_INTERACTIONS)\n  if(nrow(oncogene_amplified) > 0){\n    oncogene_amplified$CNA_TYPE <- 'gain'\n  }\n  tsgene_homozygous_deletion <- NULL\n  tsgene_homozygous_deletion <- dplyr::filter(df, !is.na(TUMOR_SUPPRESSOR) & (logR <= logR_loss_threshold))\n  tsgene_homozygous_deletion <- dplyr::select(tsgene_homozygous_deletion, -c(TUMOR_SUPPRESSOR, ONCOGENE))\n  tsgene_homozygous_deletion <- tsgene_homozygous_deletion %>% dplyr::arrange(CANCER_CENSUS_SOMATIC)\n  if(nrow(tsgene_homozygous_deletion) > 0){\n    tsgene_homozygous_deletion$CNA_TYPE <- 'loss'\n  }\n  civic_cna_biomarkers <- dplyr::filter(pcgr_data$civic_biomarkers, alteration_type == 'CNA') %>% dplyr::select(genesymbol,evidence_type,evidence_level,evidence_description,disease_name,evidence_direction,pubmed_html_link,drug_names,rating,clinical_significance,civic_consequence)\n  names(civic_cna_biomarkers) <- toupper(names(civic_cna_biomarkers))\n  civic_cna_biomarkers <- dplyr::rename(civic_cna_biomarkers, GENE = GENESYMBOL, CNA_TYPE = CIVIC_CONSEQUENCE, DESCRIPTION = EVIDENCE_DESCRIPTION, CITATION = PUBMED_HTML_LINK)\n\n  cna_biomarkers <- NULL\n  if(!is.null(tsgene_homozygous_deletion)){\n    if(nrow(tsgene_homozygous_deletion) > 0){\n      civic_biomarker_hits1 <- dplyr::inner_join(tsgene_homozygous_deletion, civic_cna_biomarkers)\n      cna_biomarkers <- rbind(cna_biomarkers,civic_biomarker_hits1)\n    }\n  }\n  if(!is.null(oncogene_amplified)){\n    if(nrow(oncogene_amplified) > 0){\n      civic_biomarker_hits2 <- dplyr::inner_join(oncogene_amplified, civic_cna_biomarkers)\n      cna_biomarkers <- rbind(cna_biomarkers,civic_biomarker_hits2)\n    }\n  }\n\n  if(!is.null(cna_biomarkers)){\n    cna_biomarkers <- cna_biomarkers[c(\"CHROMOSOME\",\"GENE\",\"CNA_TYPE\",\"EVIDENCE_LEVEL\",\"CLINICAL_SIGNIFICANCE\",\"EVIDENCE_TYPE\",\"DESCRIPTION\",\"DISEASE_NAME\",\"EVIDENCE_DIRECTION\",\"DRUG_NAMES\",\"CITATION\",\"RATING\",\"GENE_NAME\",\"CANCER_CENSUS_SOMATIC\",\"ANTINEOPLASTIC_DRUG_INTERACTIONS\",\"SEGMENT_LENGTH\", \"SEGMENT\",\"LogR\")]\n    cna_biomarkers <- cna_biomarkers %>% dplyr::arrange(EVIDENCE_LEVEL,RATING)\n  }\n\n  cnv_data <- list('ranked_segments' = segments, 'oncogene_amplified' = oncogene_amplified, 'tsgene_homozygous_deletion' = tsgene_homozygous_deletion,'cnv_df_for_print' = df_print_sorted, 'cna_biomarkers' = cna_biomarkers)\n  return(cnv_data)\n}\n\n#' Function that generates a data frame with basic biomarker annotations from tier1 variants\n#'\n#' @param tier1_variants df with tier 1 variants\n#' @param sample_id Sample identifier\n#'\n#' @return tsv_variants data frame with all tier 1 biomarkers for tab-separated output\n#'\ngenerate_biomarker_tsv <- function(tier1_variants, sample_name = 'test'){\n\n  bm_tags <- c('BM_CLINICAL_SIGNIFICANCE','BM_EVIDENCE_LEVEL','BM_EVIDENCE_TYPE','BM_EVIDENCE_DIRECTION','BM_DISEASE_NAME', 'BM_DRUG_NAMES','BM_RATING','BM_CITATION')\n  all_biomarker_tags <- c(c('GENOMIC_CHANGE','GENOME_VERSION','VCF_SAMPLE_ID','SYMBOL','CONSEQUENCE'),bm_tags)\n  tier1_tsv <- tier1_variants\n  tsv_biomarkers <- NULL\n  if(nrow(tier1_tsv) > 0){\n    tier1_tsv$VCF_SAMPLE_ID <- sample_name\n    tier1_tsv <- tier1_tsv %>% dplyr::select(dplyr::one_of(all_biomarker_tags))\n    tier1_tsv$TIER <- 'TIER 1'\n    tier1_tsv$TIER_DESCRIPTION <- 'Clinical biomarker - prognostic/diagnostic/drug sensitivity/resistance'\n\n    tmp2 <- as.data.frame(tier1_tsv %>% dplyr::rowwise() %>% dplyr::mutate(BM_CITATION2 = paste(unlist(stringr::str_replace_all(stringr::str_match_all(BM_CITATION,\">.+<\"),\"^>|<$\",\"\")),collapse =\";\")))\n\n    tier1_tsv$BM_CITATION <- tmp2$BM_CITATION2\n    tsv_biomarkers <- tier1_tsv %>% dplyr::distinct()\n  }\n  return(tsv_biomarkers)\n}\n\n#' Function that generates dense and tiered annotated variant datasets\n#'\n#' @param tier1_variants df with tier 1 variants\n#' @param tier2_variants df with tier 2 variants\n#' @param tier3_variants df with tier 3 variants\n#' @param tier4_variants df with tier 4 variants\n#' @param tier5_variants df with tier 5 variants\n#' @param sample_name Sample identifier\n#'\n#' @return tsv_variants data frame with tier-annotated list of variants for tab-separated output\n#'\ngenerate_tier_tsv <- function(tier1_variants, tier2_variants, tier3_variants, tier4_variants, tier5_variants, sample_name = 'test'){\n\n  rlogging::message(\"Generating tiered set of result variants for output in tab-separated values (TSV) file\")\n  bm_tags <- c('BM_CLINICAL_SIGNIFICANCE','BM_EVIDENCE_LEVEL','BM_EVIDENCE_TYPE','BM_EVIDENCE_DIRECTION','BM_DISEASE_NAME','BM_DRUG_NAMES','BM_RATING','BM_CITATION')\n  tier1_tsv <- tier1_variants\n  tsv_variants <- NULL\n  if(nrow(tier1_tsv) > 0){\n    tier1_tsv <- as.data.frame(tier1_tsv %>% dplyr::select(-dplyr::one_of(bm_tags)))\n    tier1_tsv$TIER <- 'TIER 1'\n    tier1_tsv$TIER_DESCRIPTION <- 'Clinical biomarker - prognostic/diagnostic/drug sensitivity/resistance'\n    tier1_tsv$VCF_SAMPLE_ID <- sample_name\n    #tier1_tsv <- unique(tier1_tsv)\n    tier1_tsv_unique <- tier1_tsv %>% dplyr::distinct()\n    tsv_variants <- rbind(tsv_variants, dplyr::select(tier1_tsv_unique, dplyr::one_of(pcgr_data$pcgr_tsv_tiered_columns)))\n  }\n  tier2_tsv <- tier2_variants\n  if(nrow(tier2_tsv) > 0){\n    tier2_tsv$TIER <- 'TIER 2'\n    tier2_tsv$TIER_DESCRIPTION <- 'Other cancer mutation hotspot/predicted driver mutation/curated cancer-associated mutation'\n    tier2_tsv$VCF_SAMPLE_ID <- sample_name\n    tsv_variants <- rbind(tsv_variants, dplyr::select(tier2_tsv, dplyr::one_of(pcgr_data$pcgr_tsv_tiered_columns)))\n  }\n  tier3_tsv <- tier3_variants\n  if(nrow(tier3_tsv) > 0){\n    tier3_tsv$TIER <- 'TIER 3'\n    tier3_tsv$TIER_DESCRIPTION <- 'Other cancer census gene/proto-oncogene/tumor suppressor mutation'\n    tier3_tsv$VCF_SAMPLE_ID <- sample_name\n    tsv_variants <- rbind(tsv_variants, dplyr::select(tier3_tsv, dplyr::one_of(pcgr_data$pcgr_tsv_tiered_columns)))\n  }\n  tier4_tsv <- tier4_variants\n  if(nrow(tier4_tsv) > 0){\n    tier4_tsv$TIER <- 'TIER 4'\n    tier4_tsv$VCF_SAMPLE_ID <- sample_name\n    tier4_tsv$TIER_DESCRIPTION <- 'Other coding mutation'\n    tsv_variants <- rbind(tsv_variants, dplyr::select(tier4_tsv, dplyr::one_of(pcgr_data$pcgr_tsv_tiered_columns)))\n  }\n  tier5_tsv <- tier5_variants\n  if(nrow(tier5_tsv) > 0){\n    tier5_tsv$TIER <- 'TIER 5'\n    tier5_tsv$VCF_SAMPLE_ID <- sample_name\n    tier5_tsv$TIER_DESCRIPTION <- 'Non-coding mutation'\n    tsv_variants <- rbind(tsv_variants, dplyr::select(tier5_tsv, dplyr::one_of(pcgr_data$pcgr_tsv_tiered_columns)))\n  }\n  tsv_variants$COSMIC <- unlist(lapply(stringr::str_match_all(tsv_variants$COSMIC,\"COSM[0-9]{1,}\"),paste,collapse=\",\"))\n  tsv_variants$DBSNP <- unlist(lapply(stringr::str_match_all(tsv_variants$DBSNP,\">rs[0-9]{1,}<\"),paste,collapse=\",\"))\n  tsv_variants$DBSNP <- stringr::str_replace_all(tsv_variants$DBSNP,\">|<\",\"\")\n  tsv_variants$GENE_NAME <- unlist(lapply(stringr::str_match_all(tsv_variants$GENE_NAME,\">.+<\"),paste,collapse=\",\"))\n  tsv_variants$GENE_NAME <- stringr::str_replace_all(tsv_variants$GENE_NAME,\">|<\",\"\")\n  tsv_variants$CLINVAR <- unlist(lapply(stringr::str_match_all(tsv_variants$CLINVAR,\">.+<\"),paste,collapse=\",\"))\n  tsv_variants$CLINVAR <- stringr::str_replace_all(tsv_variants$CLINVAR,\">|<\",\"\")\n  tsv_variants$PROTEIN_DOMAIN <- unlist(lapply(stringr::str_match_all(tsv_variants$PROTEIN_DOMAIN,\">.+<\"),paste,collapse=\",\"))\n  tsv_variants$PROTEIN_DOMAIN <- stringr::str_replace_all(tsv_variants$PROTEIN_DOMAIN,\">|<\",\"\")\n\n  tsv_variants <- tsv_variants %>% dplyr::distinct()\n\n  return(tsv_variants)\n}\n\n\n#' Function that generates report data for tiered precision oncology report\n#'\n#' @param sample_calls data frame with list of variant calls\n#' @param sample_id sample identifier\n#' @param minimum_n_signature_analysis minimum number of mutations for signature analysis\n#' @param signatures_limit limit the number of possible mutational signatures\n#'\n#' @return report_data data frame with all report elements\n#'\ngenerate_report_data <- function(sample_calls, sample_name = NULL, minimum_n_signature_analysis = 50, signatures_limit = 6){\n\n  rlogging::message(\"Generating data for tiered cancer genome report\")\n  tier1_report <- FALSE\n  tier2_report <- FALSE\n  tier3_report <- FALSE\n  tier4_report <- FALSE\n  tier5_report <- FALSE\n  clinical_evidence_items_tier1A <- data.frame()\n  clinical_evidence_items_tier1B <- data.frame()\n  clinical_evidence_items_tier1C <- data.frame()\n  variants_tier1_display <- data.frame()\n  variants_tier2_display <- data.frame()\n  variants_tier3_display <- data.frame()\n  variants_tier4_display <- data.frame()\n  variants_tier5_display <- data.frame()\n\n  signature_report <- FALSE\n  missing_signature_data <- FALSE\n  signature_call_set <- data.frame()\n\n  sample_calls_coding <- sample_calls %>% dplyr::filter(stringr::str_detect(CONSEQUENCE,\"stop_gained|stop_lost|start_lost|frameshift_variant|missense_variant|splice_donor|splice_acceptor|inframe_deletion|inframe_insertion\"))\n  rlogging::message(paste0(\"Number of coding variants: \",nrow(sample_calls_coding)))\n  sample_calls_noncoding <- sample_calls %>% dplyr::filter(!stringr::str_detect(CONSEQUENCE,\"stop_gained|stop_lost|start_lost|frameshift_variant|missense_variant|splice_donor|splice_acceptor|inframe_deletion|inframe_insertion\"))\n  rlogging::message(paste0(\"Number of noncoding variants: \",nrow(sample_calls_noncoding)))\n\n  #sample_stats_plot_all <- OncoVarReporter::plot_call_statistics(sample_calls,\"Somatic calls - all\")\n  #sample_stats_plot_coding <- OncoVarReporter::plot_call_statistics(sample_calls_coding,\"Somatic calls - coding\")\n\n  min_variants_for_signature <- minimum_n_signature_analysis\n  signature_data <- NULL\n  tsv_variants <- NULL\n  tsv_biomarkers <- NULL\n\n  if(any(grepl(paste0(\"VARIANT_CLASS$\"),names(sample_calls)))){\n    if(nrow(sample_calls[sample_calls$VARIANT_CLASS == 'SNV',]) >= min_variants_for_signature){\n      signature_call_set <- sample_calls[sample_calls$VARIANT_CLASS == 'SNV',]\n      signature_call_set <- dplyr::filter(signature_call_set, CHROM != 'MT')\n      signature_call_set$VCF_SAMPLE_ID <- sample_name\n      signature_report <- TRUE\n\n      mut_signature_contributions <- pcgrr2::signature_contributions_single_sample(signature_call_set, sample_name = sample_name, signatures_limit = signatures_limit)\n\n      signature_columns <- as.numeric(stringr::str_replace(as.character(mut_signature_contributions$which_signatures_df[mut_signature_contributions$which_signatures_df$signature_id != 'unknown',]$signature_id),\"S\",\"\"))\n\n      weight_df <- data.frame('Signature_ID' = as.character(mut_signature_contributions$which_signatures_df$signature_id), 'Weight' = round(as.numeric(mut_signature_contributions$which_signatures_df$weight),digits=3), stringsAsFactors = F)\n\n      cancertypes_aetiologies <- pcgr_data$signatures_aetiologies[signature_columns,]\n      signatures_cancertypes_aetiologies <- dplyr::left_join(cancertypes_aetiologies,weight_df,by=c(\"Signature_ID\")) %>% dplyr::arrange(desc(Weight))\n      signatures_cancertypes_aetiologies <- signatures_cancertypes_aetiologies[,c(\"Signature_ID\",\"Weight\",\"Cancer_types\",\"Proposed_aetiology\",\"Comments\")]\n\n      signature_data <- list('signature_call_set' = signature_call_set, 'mut_signature_contributions' = mut_signature_contributions, 'signatures_cancertypes_aetiologies' = signatures_cancertypes_aetiologies)\n\n    }\n    else{\n      if(nrow(sample_calls[sample_calls$VARIANT_CLASS == 'SNV',]) > 0){\n        signature_call_set <- sample_calls[sample_calls$VARIANT_CLASS == 'SNV',]\n        signature_call_set <- dplyr::filter(signature_call_set, CHROM != 'MT')\n      }\n      rlogging::message(paste0(\"Too few variants (n = \",nrow(signature_call_set),\") for reconstruction of mutational signatures by deconstructSigs\"))\n      missing_signature_data <- TRUE\n      signature_data <- list('signature_call_set' = signature_call_set)\n\n    }\n  }\n\n  clinical_evidence_items_tier1A <- pcgrr2::get_clinical_associations_civic_cbmdb(sample_calls_coding)\n  clinical_evidence_items_tier1B <- pcgrr2::get_clinical_associations_civic_cbmdb(sample_calls_coding, mapping = 'codon')\n  clinical_evidence_items_tier1C <- pcgrr2::get_clinical_associations_civic_cbmdb(sample_calls_coding, mapping = 'exon')\n\n  variants_tier1 <- rbind(clinical_evidence_items_tier1A$clinical_evidence_items,clinical_evidence_items_tier1B$clinical_evidence_items,clinical_evidence_items_tier1C$clinical_evidence_items)\n  biomarker_descriptions <- rbind(clinical_evidence_items_tier1A$biomarker_descriptions,clinical_evidence_items_tier1B$biomarker_descriptions,clinical_evidence_items_tier1C$biomarker_descriptions)\n  if(nrow(clinical_evidence_items_tier1B$clinical_evidence_items) > 0){\n    clinical_evidence_items_tier1B$clinical_evidence_items <- dplyr::select(clinical_evidence_items_tier1B$clinical_evidence_items, dplyr::one_of(tier1_tags_display))\n  }\n  if(nrow(clinical_evidence_items_tier1A$clinical_evidence_items) > 0){\n    clinical_evidence_items_tier1A$clinical_evidence_items <- dplyr::select(clinical_evidence_items_tier1A$clinical_evidence_items, dplyr::one_of(tier1_tags_display))\n  }\n  if(nrow(clinical_evidence_items_tier1C$clinical_evidence_items) > 0){\n    clinical_evidence_items_tier1C$clinical_evidence_items <- dplyr::select(clinical_evidence_items_tier1C$clinical_evidence_items, dplyr::one_of(tier1_tags_display))\n  }\n\n  if(nrow(variants_tier1) > 0){\n    variants_tier1_display <- variants_tier1 %>% dplyr::select(GENOMIC_CHANGE) %>% dplyr::distinct()\n    tier1_report <- TRUE\n    variants_tier1 <- dplyr::rename(variants_tier1, BM_CLINICAL_SIGNIFICANCE = CLINICAL_SIGNIFICANCE, BM_EVIDENCE_LEVEL = EVIDENCE_LEVEL, BM_EVIDENCE_TYPE = EVIDENCE_TYPE, BM_EVIDENCE_DIRECTION = EVIDENCE_DIRECTION, BM_DISEASE_NAME = DISEASE_NAME, BM_DRUG_NAMES = DRUG_NAMES, BM_CITATION = CITATION, BM_RATING = RATING)\n\n  }\n\n  ## Analyze Tier 2: curated mutations, cancer mutation hotspots and predicted driver mutations\n  variants_tier2 <- dplyr::select(sample_calls_coding, dplyr::one_of(pcgr_data$pcgr_all_annotation_columns))\n  variants_tier2 <- variants_tier2 %>% dplyr::filter(!is.na(INTOGEN_DRIVER_MUT) | !is.na(CANCER_MUTATION_HOTSPOT) | !is.na(OTHER_DISEASE_DOCM))\n  if(nrow(variants_tier1) > 0){\n    variants_tier2 <- dplyr::anti_join(variants_tier2, variants_tier1_display, by=c(\"GENOMIC_CHANGE\"))\n  }\n  tier12 <- variants_tier1_display\n  if(nrow(variants_tier2) > 0){\n    tier2_report <- TRUE\n    if(nrow(variants_tier2[is.na(variants_tier2$ONCOSCORE),]) > 0){\n      variants_tier2[is.na(variants_tier2$ONCOSCORE),]$ONCOSCORE <- 0\n    }\n    variants_tier2 <- variants_tier2 %>% dplyr::arrange(desc(ONCOSCORE))\n    tier12 <- rbind(variants_tier1_display,dplyr::select(variants_tier2,GENOMIC_CHANGE)) %>% dplyr::distinct()\n    variants_tier2_display <- dplyr::select(variants_tier2, dplyr::one_of(pcgr_data$tier2_tags_display))\n  }\n\n  ## Analyze Tier 3: coding mutations in oncogenes/tumor suppressors/cancer census genes\n  variants_tier3 <- dplyr::select(sample_calls_coding, dplyr::one_of(pcgr_data$pcgr_all_annotation_columns))\n  variants_tier3 <- variants_tier3 %>% dplyr::filter(!is.na(CANCER_CENSUS_SOMATIC) | ONCOGENE == TRUE | TUMOR_SUPPRESSOR == TRUE)\n  if(nrow(tier12) > 0){\n    variants_tier3 <- dplyr::anti_join(variants_tier3,tier12, by=c(\"GENOMIC_CHANGE\"))\n  }\n  tier123 <- tier12\n  if(nrow(variants_tier3) > 0){\n    tier3_report <- TRUE\n    if(nrow(variants_tier3[is.na(variants_tier3$ONCOSCORE),]) > 0){\n      variants_tier3[is.na(variants_tier3$ONCOSCORE),]$ONCOSCORE <- 0\n    }\n    variants_tier3 <- variants_tier3 %>% dplyr::arrange(desc(ONCOSCORE))\n    tier123 <- rbind(tier12,dplyr::select(variants_tier3,GENOMIC_CHANGE)) %>% dplyr::distinct()\n    variants_tier3_display <- dplyr::select(variants_tier3, dplyr::one_of(pcgr_data$tier3_tags_display))\n  }\n\n  ## Analyze Tier 4: Other coding mutations\n  variants_tier4 <- dplyr::select(sample_calls_coding, dplyr::one_of(pcgr_data$pcgr_all_annotation_columns))\n  if(nrow(tier123) > 0){\n    variants_tier4 <- dplyr::anti_join(variants_tier4,tier123, by=c(\"GENOMIC_CHANGE\"))\n  }\n  if(nrow(variants_tier4) > 0){\n    if(nrow(variants_tier4[is.na(variants_tier4$ONCOSCORE),]) > 0){\n      variants_tier4[is.na(variants_tier4$ONCOSCORE),]$ONCOSCORE <- 0\n    }\n    variants_tier4 <- variants_tier4 %>% dplyr::arrange(desc(ONCOSCORE))\n    tier4_report <- TRUE\n    variants_tier4_display <- dplyr::select(variants_tier4, dplyr::one_of(pcgr_data$tier4_tags_display))\n  }\n\n\n  ## Analyze Tier 5: Non-coding mutations\n  variants_tier5 <- dplyr::select(sample_calls_noncoding, dplyr::one_of(pcgr_data$pcgr_all_annotation_columns))\n  if(nrow(variants_tier5) > 0){\n    if(nrow(variants_tier5[is.na(variants_tier5$ONCOSCORE),]) > 0){\n      variants_tier5[is.na(variants_tier5$ONCOSCORE),]$ONCOSCORE <- 0\n    }\n    variants_tier5 <- variants_tier5 %>% dplyr::arrange(desc(ONCOSCORE))\n    tier5_report <- TRUE\n    variants_tier5_display <- dplyr::select(variants_tier5, dplyr::one_of(pcgr_data$tier5_tags_display))\n  }\n\n  tsv_variants <- NULL\n  tsv_biomarkers <- NULL\n  tsv_variants <- pcgrr2::generate_tier_tsv(variants_tier1,\n                                           variants_tier2,\n                                           variants_tier3,\n                                           variants_tier4,\n                                           variants_tier5,\n                                           sample_name = sample_name)\n\n  maf_df <- pcgrr2::tier_to_maf(tsv_variants)\n\n  tsv_biomarkers <- pcgrr2::generate_biomarker_tsv(variants_tier1, sample_name = sample_name)\n\n  report_data <- list('tier1_report' = tier1_report, 'tier2_report' = tier2_report, 'tier3_report' = tier3_report, 'tier4_report' = tier4_report, 'tier5_report' = tier5_report, 'clinical_evidence_items_tier1A' = clinical_evidence_items_tier1A$clinical_evidence_items, 'clinical_evidence_items_tier1B' = clinical_evidence_items_tier1B$clinical_evidence_items, 'clinical_evidence_items_tier1C' = clinical_evidence_items_tier1C$clinical_evidence_items, 'biomarker_descriptions' = biomarker_descriptions, 'tsv_variants' = tsv_variants, 'tsv_biomarkers' = tsv_biomarkers, 'variants_tier1_display' = variants_tier1_display, 'variants_tier2_display' = variants_tier2_display, 'variants_tier3_display' = variants_tier3_display, 'variants_tier4_display' = variants_tier4_display,'variants_tier5_display' = variants_tier5_display, 'signature_report' = signature_report, 'missing_signature_data' = missing_signature_data, 'signature_data' = signature_data, 'signatures_limit' = signatures_limit, 'maf_df' = maf_df, 'sample_name' = sample_name)\n\n\n  return(report_data)\n\n}\n\n#' Function that adds HTML links to different genetic variant identifiers\n#'\n#' @param var_df data frame with variants\n#' @param vardb type of variant database\n#' @param linktype type of link\n#'\n#' @return var_df\n#'\nannotate_variant_link <- function(var_df, vardb = \"DBSNP\", linktype = \"dbsource\"){\n  if(vardb == 'DBSNP'){\n\n    if(any(grepl(paste0(\"^DBSNPRSID$\"),names(var_df))) & any(grepl(paste0(\"^VAR_ID$\"),names(var_df)))){\n      var_df_unique_slim <- dplyr::select(var_df, DBSNPRSID, VAR_ID) %>% dplyr::filter(!is.na(DBSNPRSID)) %>% dplyr::distinct()\n      if(nrow(var_df_unique_slim) > 0){\n        var_df_unique_slim_melted <- var_df_unique_slim %>% tidyr::separate_rows(DBSNPRSID,sep=\",\")\n        if(linktype == \"dbsource\"){\n          var_df_unique_slim_melted <- var_df_unique_slim_melted %>% dplyr::mutate(tmp_dbsnp = paste0(\"<a href='http://www.ncbi.nlm.nih.gov/projects/SNP/snp_ref.cgi?rs=\",DBSNPRSID,\"' target=\\\"_blank\\\">rs\",DBSNPRSID,\"</a>\"))\n        }\n\n        var_df_links <- dplyr::group_by(var_df_unique_slim_melted, VAR_ID) %>% dplyr::summarise(DBSNPLINK = unlist(paste(tmp_dbsnp, collapse = \", \")))\n        var_df_links <- dplyr::select(var_df_links, VAR_ID, DBSNPLINK)\n        var_df <- dplyr::left_join(var_df, var_df_links,by=c(\"VAR_ID\" = \"VAR_ID\"))\n      }\n      else{\n        var_df$DBSNPLINK <- NA\n      }\n    }\n    else{\n      cat(\"WARNING: Could not generate DBSNP links - no DBSNPRSID provided in annotated VCF\",sep=\"\\n\")\n      var_df$DBSNPLINK <- NA\n    }\n  }\n  if(vardb == 'CLINVAR'){\n\n    if(any(grepl(paste0(\"^CLINVAR_MSID$\"),names(var_df))) & any(grepl(paste0(\"^VAR_ID$\"),names(var_df))) & any(grepl(paste0(\"^CLINVAR_TRAITS_ALL$\"),names(var_df)))){\n      var_df_unique_slim <- dplyr::select(var_df, VAR_ID, CLINVAR_MSID, CLINVAR_TRAITS_ALL) %>% dplyr::filter(!is.na(CLINVAR_MSID)) %>% dplyr::distinct()\n      if(nrow(var_df_unique_slim) > 0){\n        if(linktype == \"dbsource\"){\n          var_df_unique_slim <- var_df_unique_slim %>% dplyr::mutate(CLINVARLINK = paste0(\"<a href='http://www.ncbi.nlm.nih.gov/clinvar/variation/\",CLINVAR_MSID,\"' target=\\\"_blank\\\">\",CLINVAR_TRAITS_ALL,\"</a>\"))\n        }\n        var_df_links <- var_df_unique_slim %>% dplyr::select(VAR_ID, CLINVARLINK)\n        var_df <- dplyr::left_join(var_df, var_df_links,by=c(\"VAR_ID\" = \"VAR_ID\"))\n      }\n      else{\n        var_df$CLINVARLINK <- NA\n      }\n    }\n    else{\n      cat(\"WARNING: Could not generate CLINVAR links - no CLINVAR_MSID provided in annotated VCF\",sep=\"\\n\")\n      var_df$CLINVARLINK <- NA\n    }\n  }\n\n  if(vardb == 'NCBI_GENE'){\n\n    if(any(grepl(paste0(\"^GENENAME$\"),names(var_df))) & any(grepl(paste0(\"^VAR_ID$\"),names(var_df))) & any(grepl(paste0(\"^ENTREZ_ID$\"),names(var_df)))){\n      var_df_unique_slim <- dplyr::select(var_df, VAR_ID, GENENAME, ENTREZ_ID) %>% dplyr::filter(!is.na(ENTREZ_ID)) %>% dplyr::distinct()\n      if(nrow(var_df_unique_slim) > 0){\n        if(linktype == \"dbsource\"){\n          var_df_unique_slim <- var_df_unique_slim %>% dplyr::mutate(NCBI_GENE_LINK = paste0(\"<a href='http://www.ncbi.nlm.nih.gov/gene/\",ENTREZ_ID,\"' target=\\\"_blank\\\">\",GENENAME,\"</a>\"))\n        }\n        var_df_links <- var_df_unique_slim %>% dplyr::select(VAR_ID, NCBI_GENE_LINK)\n        var_df <- dplyr::left_join(var_df, var_df_links,by=c(\"VAR_ID\" = \"VAR_ID\"))\n      }\n      else{\n        var_df$NCBI_GENE_LINK <- NA\n      }\n    }\n    else{\n      cat(\"WARNING: Could not generate NCBI_GENE links - no ENTREZ_ID provided in annotated VCF\",sep=\"\\n\")\n      var_df$NCBI_GENE_LINK <- NA\n    }\n  }\n\n  if(vardb == 'COSMIC'){\n\n    if(any(grepl(paste0(\"^COSMIC_MUTATION_ID$\"),names(var_df))) & any(grepl(paste0(\"^VAR_ID$\"),names(var_df)))){\n      var_df_unique_slim <- dplyr::select(var_df, VAR_ID, COSMIC_MUTATION_ID) %>% dplyr::filter(!is.na(COSMIC_MUTATION_ID)) %>% dplyr::distinct()\n      if(nrow(var_df_unique_slim) > 0){\n        var_df_unique_slim_melted <- var_df_unique_slim %>% tidyr::separate_rows(COSMIC_MUTATION_ID,sep=\"&\")\n        if(linktype == \"dbsource\"){\n          var_df_unique_slim_melted <- var_df_unique_slim_melted %>% dplyr::mutate(tmp_cosmic = paste0(\"<a href='http://cancer.sanger.ac.uk/cosmic/mutation/overview?id=\",stringr::str_replace(COSMIC_MUTATION_ID,\"COSM\",\"\"),\"' target=\\\"_blank\\\">\",COSMIC_MUTATION_ID,\"</a>\"))\n        }\n        var_df_links <- dplyr::group_by(var_df_unique_slim_melted, VAR_ID) %>% dplyr::summarise(COSMICLINK = unlist(paste(tmp_cosmic, collapse = \", \")))\n        var_df_links <- dplyr::select(var_df_links, VAR_ID, COSMICLINK)\n        var_df <- dplyr::left_join(var_df, var_df_links,by=c(\"VAR_ID\" = \"VAR_ID\"))\n      }\n      else{\n        var_df$COSMICLINK <- NA\n      }\n    }\n    else{\n      cat(\"WARNING: Could not add COSMIC links - no COSMIC_MUTATION_ID provided in annotated VCF\",sep=\"\\n\")\n      var_df$COSMICLINK <- NA\n    }\n  }\n\n  if(vardb == 'DGIDB'){\n    if(any(grepl(paste0(\"^ANTINEOPLASTIC_DRUG_INTERACTION$\"),names(var_df))) & any(grepl(paste0(\"^VAR_ID$\"),names(var_df)))){\n      var_df_unique_slim <- dplyr::select(var_df, VAR_ID, ANTINEOPLASTIC_DRUG_INTERACTION) %>% dplyr::filter(!is.na(ANTINEOPLASTIC_DRUG_INTERACTION)) %>% dplyr::distinct()\n      if(nrow(var_df_unique_slim) > 0){\n        var_df_unique_slim_melted <- var_df_unique_slim %>% tidyr::separate_rows(ANTINEOPLASTIC_DRUG_INTERACTION,sep=\"&\")\n        if(linktype == \"dbsource\"){\n          var_df_unique_slim_melted <- var_df_unique_slim_melted %>% dplyr::mutate(tmp_dgidb = paste0(\"<a href='http://dgidb.genome.wustl.edu/drugs/\",stringr::str_replace(ANTINEOPLASTIC_DRUG_INTERACTION,\"\\\\S{1,}:\",\"\"),\"' target=\\\"_blank\\\">\",ANTINEOPLASTIC_DRUG_INTERACTION,\"</a>\"))\n        }\n\n        var_df_links <- dplyr::group_by(var_df_unique_slim_melted, VAR_ID) %>% dplyr::summarise(DGIDBLINK = unlist(paste(tmp_dgidb, collapse = \", \")))\n        var_df_links <- dplyr::select(var_df_links, VAR_ID, DGIDBLINK)\n        var_df <- dplyr::left_join(var_df, var_df_links,by=c(\"VAR_ID\" = \"VAR_ID\"))\n      }\n      else{\n        var_df$DGIDBLINK <- NA\n      }\n    }\n    else{\n      cat(\"WARNING: Could not generate DGIdb links - no DGIDB info provided in annotated VCF\",sep=\"\\n\")\n      var_df$DGIDBLINK <- NA\n    }\n  }\n\n  return(var_df)\n\n}\n\n#' A function that converts the INFO tags in a VRanges object into a basic types\n#'\n#' @param vr VRanges object\n#' @return vr Vranges object with INFO tags more simply formatted\n#'\n\npostprocess_vranges_info <- function(vr){\n  ## Convert IntegerLists and CharacterLists to basic character lists\n  vcf_annotations_df <- NULL\n  for(tag in colnames(GenomicRanges::mcols(vr))){\n    mcol_class <- class(GenomicRanges::mcols(vr)[,c(tag)])[1]\n\n    if(mcol_class != \"character\" & mcol_class != \"integer\" & mcol_class != \"logical\" & mcol_class != \"numeric\"){\n      annotation_track <- NULL\n      #cat(\"TAG: \",tag, ', type:',mcol_class,'\\n')\n      if(mcol_class == \"CompressedCharacterList\"){\n        annotation_track <- data.frame(val = as.character(Biostrings::unstrsplit(GenomicRanges::mcols(vr)[[tag]], sep=',')))\n      }else{\n        annotation_track <- data.frame(val = as.character(sapply(GenomicRanges::mcols(vr)[[tag]], paste, collapse=\",\")))\n      }\n      if(is.null(vcf_annotations_df)){\n        vcf_annotations_df <- data.frame(annotation_track$val)\n        names(vcf_annotations_df) <- c(tag)\n        vcf_annotations_df[,c(tag)] <- as.character(vcf_annotations_df[,c(tag)])\n      }\n      else{\n        vcf_annotations_df[,c(tag)] <- as.character(annotation_track$val)\n      }\n      ## add NA to empty values\n      if(nrow(as.data.frame(vcf_annotations_df[nchar(vcf_annotations_df[,c(tag)]) == 0,])) != 0){\n        if(dim(vcf_annotations_df)[2] == 1){\n          vcf_annotations_df[nchar(vcf_annotations_df[,c(tag)]) == 0,] <- NA\n        }\n        else{\n          vcf_annotations_df[nchar(vcf_annotations_df[,c(tag)]) == 0,][,c(tag)] <- NA\n        }\n      }\n    }\n    else{\n      #cat(\"TAG: \",tag, ', type:',mcol_class,'\\n')\n      if(is.null(vcf_annotations_df)){\n        vcf_annotations_df <- data.frame(GenomicRanges::mcols(vr)[,c(tag)])\n        names(vcf_annotations_df) <- c(tag)\n      }\n      else{\n        vcf_annotations_df[,c(tag)] <- GenomicRanges::mcols(vr)[,c(tag)]\n      }\n    }\n  }\n\n  ## add variant_id and sample_id\n  position <- GenomicRanges::start(GenomicRanges::ranges(vr))\n  vcf_annotations_df['VAR_ID'] <- paste(as.character(GenomeInfoDb::seqnames(vr)),position,VariantAnnotation::ref(vr),VariantAnnotation::alt(vr),sep=\"_\")\n  #vcf_annotations_df['VCF_SAMPLE_ID'] <- as.character(VariantAnnotation::sampleNames(vr))\n  GenomicRanges::mcols(vr) <- S4Vectors::DataFrame(vcf_annotations_df)\n\n  return(vr)\n\n}\n\n#' Function that adds PFAM name descriptions to PFAM identifiers\n#'\n#' @param vcf_data_df\n#'\n#' @return vcf_data_df_pfam\n#'\nadd_pfam_domain_links <- function(vcf_data_df){\n\n  rlogging::message(\"Extending annotation descriptions related to PFAM protein domains\")\n  if(\"DOMAINS\" %in% colnames(vcf_data_df) & \"VAR_ID\" %in% colnames(vcf_data_df)){\n    pfam_df <- dplyr::select(vcf_data_df,DOMAINS,VAR_ID) %>% dplyr::filter(!is.na(DOMAINS))\n    if(nrow(pfam_df) == 0){\n      vcf_data_df$PROTEIN_DOMAIN <- NA\n      return(vcf_data_df)\n    }\n    pfam_df <- pfam_df %>% dplyr::distinct() %>% tidyr::separate_rows(DOMAINS,sep=\"&\") %>% dplyr::filter(stringr::str_detect(DOMAINS,\"Pfam_domain\"))\n    pfam_df$DOMAINS <- stringr::str_replace(pfam_df$DOMAINS,\"Pfam_domain:\",\"\")\n    pfam_df <- dplyr::left_join(pfam_df,pcgr_data$pfam_domains,by=c(\"DOMAINS\" = \"pfam_id\")) %>% dplyr::select(VAR_ID,url)\n    pfam_df <- dplyr::rename(pfam_df, PD = url)\n    pfam_ret <- as.data.frame(dplyr::group_by(pfam_df, VAR_ID) %>% dplyr::summarise(PROTEIN_DOMAIN = paste(PD, collapse=\", \")))\n\n    if(nrow(pfam_ret) > 0){\n      vcf_data_df <- dplyr::left_join(vcf_data_df,pfam_ret,by=c(\"VAR_ID\" = \"VAR_ID\"))\n    }\n    else{\n      vcf_data_df$PROTEIN_DOMAIN <- NA\n    }\n  }\n  else{\n    vcf_data_df$PROTEIN_DOMAIN <- NA\n  }\n\n  return(vcf_data_df)\n}\n\n\n#' Function that appends clinical annotations for somatic cancer variants\n#'\n#' @param vcf_data_df data frame with variants\n#' @param mapping - one of 'exact' (allele-specific) or 'approximate' (codon or exon-level biomarkers)\n#' @param ncgc - logical indicating whether NCGC-specific tags are to be appended\n#'\n#' @return vcf_data_df\n#'\nget_clinical_associations_civic_cbmdb <- function(vcf_data_df, mapping = 'exact', variant_origin = 'Somatic Mutation'){\n\n  if(\"pubmed_html_link\" %in% colnames(pcgr_data$civic_biomarkers)){\n    pcgr_data$civic_biomarkers <- dplyr::rename(pcgr_data$civic_biomarkers, citation = pubmed_html_link)\n  }\n  if(\"evidence_description\" %in% colnames(pcgr_data$civic_biomarkers)){\n    pcgr_data$civic_biomarkers <- dplyr::rename(pcgr_data$civic_biomarkers, description = evidence_description)\n  }\n  if(\"pubmed_html_link\" %in% colnames(pcgr_data$cbmdb_biomarkers)){\n    pcgr_data$cbmdb_biomarkers <- dplyr::rename(pcgr_data$cbmdb_biomarkers, citation = pubmed_html_link)\n  }\n  if(\"evidence_description\" %in% colnames(pcgr_data$cbmdb_biomarkers)){\n    pcgr_data$cbmdb_biomarkers <- dplyr::rename(pcgr_data$cbmdb_biomarkers, description = evidence_description)\n  }\n  clinical_evidence_items <- data.frame()\n  biomarker_descriptions <- data.frame()\n\n  pcgr_data$cbmdb_biomarkers <- dplyr::filter(pcgr_data$cbmdb_biomarkers, is.na(variant_origin) | variant_origin == variant_origin)\n  pcgr_data$civic_biomarkers <- dplyr::filter(pcgr_data$civic_biomarkers, is.na(variant_origin) | variant_origin == variant_origin)\n\n  if(mapping == 'exact'){\n    vcf_data_df_civic <- vcf_data_df %>% dplyr::filter(!is.na(CIVIC_ID))\n    if(nrow(vcf_data_df_civic) > 0){\n      tmp <- dplyr::select(vcf_data_df_civic,CIVIC_ID,VAR_ID)\n      tmp <- tmp %>% tidyr::separate_rows(CIVIC_ID,sep=\",\")\n      vcf_data_df_civic <- merge(tmp,dplyr::select(vcf_data_df_civic,-c(CIVIC_ID)),by.x = \"VAR_ID\",by.y = \"VAR_ID\")\n      civic_calls <- dplyr::select(vcf_data_df_civic,dplyr::one_of(pcgr_data$pcgr_all_annotation_columns))\n      eitems <- NULL\n      if(any(stringr::str_detect(civic_calls$CIVIC_ID,\"EID\"))){\n        eitems <- dplyr::left_join(civic_calls,dplyr::filter(dplyr::select(pcgr_data$civic_biomarkers,-c(civic_exon,civic_consequence,civic_codon,transvar_id)),alteration_type == 'MUT'),by=c(\"CIVIC_ID\" = \"evidence_id\"))\n      }\n      else{\n        eitems <- dplyr::left_join(civic_calls,dplyr::filter(dplyr::select(pcgr_data$civic_biomarkers,-c(civic_exon,civic_consequence,civic_codon,transvar_id)),alteration_type == 'MUT'),by=c(\"CIVIC_ID\" = \"civic_id\"))\n      }\n      names(eitems) <- toupper(names(eitems))\n      eitems$BIOMARKER_MAPPING <- 'exact'\n      bm_descriptions <- data.frame('description' = eitems$BIOMARKER_DESCRIPTION)\n      biomarker_descriptions <- rbind(biomarker_descriptions, bm_descriptions)\n      clinical_evidence_items <- rbind(clinical_evidence_items, eitems)\n    }\n    vcf_data_df_cbmdb <- vcf_data_df %>% dplyr::filter(is.na(CIVIC_ID) & !is.na(CBMDB_ID))\n    if(nrow(vcf_data_df_cbmdb) > 0){\n      tmp <- dplyr::select(vcf_data_df_cbmdb,CBMDB_ID,VAR_ID)\n      tmp <- tmp %>% tidyr::separate_rows(CBMDB_ID,sep=\",\")\n      tmp$CBMDB_ID <- as.integer(tmp$CBMDB_ID)\n      vcf_data_df_cbmdb <- merge(tmp,dplyr::select(vcf_data_df_cbmdb,-c(CBMDB_ID)),by.x = \"VAR_ID\",by.y = \"VAR_ID\")\n      cbmdb_calls <- dplyr::select(vcf_data_df_cbmdb,dplyr::one_of(pcgr_data$pcgr_all_annotation_columns))\n      eitems <- dplyr::left_join(cbmdb_calls,dplyr::filter(dplyr::select(pcgr_data$cbmdb_biomarkers,-c(drug_family,transvar_id)),alteration_type == 'MUT'),by=c(\"CBMDB_ID\" = \"CBMDB_ID\"))\n      names(eitems) <- toupper(names(eitems))\n      eitems$BIOMARKER_MAPPING <- 'exact'\n      bm_descriptions <- data.frame('description' = eitems$BIOMARKER_DESCRIPTION)\n      biomarker_descriptions <- rbind(biomarker_descriptions, bm_descriptions)\n      eitems <- eitems %>% dplyr::distinct()\n      clinical_evidence_items <- rbind(clinical_evidence_items, eitems)\n    }\n  }\n  else{\n    vcf_data_df_civic <- vcf_data_df %>% dplyr::filter(!is.na(CIVIC_ID_2))\n    if(nrow(vcf_data_df_civic) > 0){\n      tmp <- dplyr::select(vcf_data_df_civic,CIVIC_ID_2,VAR_ID)\n      tmp <- tmp %>% tidyr::separate_rows(CIVIC_ID_2,sep=\",\")\n      vcf_data_df_civic <- merge(tmp,dplyr::select(vcf_data_df_civic,-c(CIVIC_ID_2)),by.x = \"VAR_ID\",by.y = \"VAR_ID\")\n      civic_calls <- dplyr::select(vcf_data_df_civic,dplyr::one_of(pcgr_data$pcgr_all_annotation_columns))\n      clinical_evidence_items <- NULL\n      if(any(stringr::str_detect(civic_calls$CIVIC_ID_2,\"EID\"))){\n        clinical_evidence_items <- dplyr::left_join(civic_calls,dplyr::filter(pcgr_data$civic_biomarkers,alteration_type == 'MUT'),by=c(\"CIVIC_ID_2\" = \"evidence_id\"))\n      }\n      else{\n        clinical_evidence_items <- dplyr::left_join(civic_calls,dplyr::filter(pcgr_data$civic_biomarkers,alteration_type == 'MUT'),by=c(\"CIVIC_ID_2\" = \"civic_id\"))\n      }\n      clinical_evidence_items <- clinical_evidence_items %>% dplyr::filter(mapping_category != 'gene')\n      names(clinical_evidence_items) <- toupper(names(clinical_evidence_items))\n      if(nrow(clinical_evidence_items) > 0){\n        if(mapping == 'codon' & 'CIVIC_CODON' %in% colnames(clinical_evidence_items)){\n          if(nrow(clinical_evidence_items[!is.na(clinical_evidence_items$CIVIC_CODON),]) > 0){\n            clinical_evidence_items$CIVIC_CODON <- as.character(clinical_evidence_items$CIVIC_CODON)\n            clinical_evidence_items <- dplyr::filter(clinical_evidence_items, !is.na(CIVIC_CODON))\n            clinical_evidence_items$CODON <- as.character(stringr::str_replace_all(clinical_evidence_items$PROTEIN_CHANGE,\"p\\\\.[A-Z]{1,}|[A-Z]|[A-Z]{1,}$|fs$|del$|dup$|delins[A-Z]{1,}$\",\"\"))\n            clinical_evidence_items$CIVIC_CODON <- as.character(clinical_evidence_items$CIVIC_CODON)\n            clinical_evidence_items <- clinical_evidence_items %>% dplyr::filter(startsWith(CODON,CIVIC_CODON))\n            if(nrow(clinical_evidence_items) > 0){\n              clinical_evidence_items <- clinical_evidence_items %>% dplyr::filter(!is.na(CIVIC_CONSEQUENCE) & startsWith(CONSEQUENCE,CIVIC_CONSEQUENCE) | is.na(CIVIC_CONSEQUENCE))\n              if(nrow(clinical_evidence_items) > 0){\n                clinical_evidence_items <- clinical_evidence_items %>% dplyr::select(-c(EXON,CODON,CIVIC_CONSEQUENCE,MAPPING_CATEGORY,CIVIC_CODON,CIVIC_EXON))\n                names(clinical_evidence_items) <- toupper(names(clinical_evidence_items))\n                bm_descriptions <- data.frame('description' = clinical_evidence_items$BIOMARKER_DESCRIPTION)\n                biomarker_descriptions <- rbind(biomarker_descriptions, bm_descriptions)\n              }\n              else{\n                clinical_evidence_items <- data.frame()\n              }\n            }\n            else{\n              clinical_evidence_items <- data.frame()\n            }\n          }\n          else{\n            clinical_evidence_items <- data.frame()\n          }\n        }\n        if(mapping == 'exon' & 'CIVIC_EXON' %in% colnames(clinical_evidence_items)){\n          if(nrow(clinical_evidence_items[!is.na(clinical_evidence_items$CIVIC_EXON),]) > 0){\n            clinical_evidence_items <- dplyr::filter(clinical_evidence_items, !is.na(CIVIC_EXON))\n            clinical_evidence_items$EXON <- as.integer(stringr::str_split_fixed(clinical_evidence_items$EXON,\"/\",2)[,1])\n            clinical_evidence_items <- clinical_evidence_items %>% dplyr::filter(EXON == CIVIC_EXON)\n            if(nrow(clinical_evidence_items) > 0){\n              clinical_evidence_items <- clinical_evidence_items %>% dplyr::filter(!is.na(CIVIC_CONSEQUENCE) & startsWith(CONSEQUENCE,CIVIC_CONSEQUENCE) | is.na(CIVIC_CONSEQUENCE))\n              if(nrow(clinical_evidence_items) > 0){\n                clinical_evidence_items <- clinical_evidence_items %>% dplyr::select(-c(EXON,CIVIC_CONSEQUENCE,MAPPING_CATEGORY,CIVIC_CODON,CIVIC_EXON))\n                names(clinical_evidence_items) <- toupper(names(clinical_evidence_items))\n                bm_descriptions <- data.frame('description' = clinical_evidence_items$BIOMARKER_DESCRIPTION)\n                biomarker_descriptions <- rbind(biomarker_descriptions, bm_descriptions)\n              }\n              else{\n                clinical_evidence_items <- data.frame()\n              }\n            }\n            else{\n              clinical_evidence_items <- data.frame()\n            }\n          }\n          else{\n            clinical_evidence_items <- data.frame()\n          }\n        }\n      }\n    }\n\n  }\n\n  if(nrow(clinical_evidence_items) > 0){\n    pcgr_all_annotation_columns_reduced <- pcgr_data$pcgr_all_annotation_columns[-which(pcgr_data$pcgr_all_annotation_columns == 'EXON' | pcgr_data$pcgr_all_annotation_columns == 'CIVIC_ID' | pcgr_data$pcgr_all_annotation_columns == 'CIVIC_ID_2' | pcgr_data$pcgr_all_annotation_columns == 'CBMDB_ID')]\n\n    all_tier1_tags <- c(pcgr_data$pcgr_all_annotation_columns_reduced,c(\"CLINICAL_SIGNIFICANCE\",\"EVIDENCE_LEVEL\",\"EVIDENCE_TYPE\",\"EVIDENCE_DIRECTION\",\"DISEASE_NAME\",\"DESCRIPTION\",\"CITATION\",\"DRUG_NAMES\",\"RATING\"))\n    clinical_evidence_items <- dplyr::select(clinical_evidence_items, dplyr::one_of(all_tier1_tags))\n    unique_variants <- clinical_evidence_items %>% dplyr::select(SYMBOL,CONSEQUENCE,PROTEIN_CHANGE,CDS_CHANGE) %>% dplyr::distinct()\n    clinical_evidence_items <- clinical_evidence_items %>% dplyr::arrange(EVIDENCE_LEVEL,RATING)\n    biomarker_descriptions <- biomarker_descriptions %>% dplyr::filter(!is.na(description)) %>% dplyr::distinct()\n    rlogging::message(paste0(nrow(clinical_evidence_items),' clinical evidence item(s) found .. (',nrow(unique_variants),' unique variant(s)), mapping = ',mapping))\n    rlogging::message('Underlying variant(s):')\n    for(i in 1:nrow(unique_variants)){\n      rlogging::message(paste(unique_variants[i,],collapse=\" \"))\n    }\n  }\n  else{\n    rlogging::message(paste0(nrow(clinical_evidence_items),' clinical evidence item(s) found .. mapping = ',mapping))\n  }\n\n  eitems_bm_descriptions <- list('clinical_evidence_items' = clinical_evidence_items, 'biomarker_descriptions' = biomarker_descriptions)\n\n  return(eitems_bm_descriptions)\n\n}\n\n#' Function that adds read support (depth, allelic fraction) for tumor and normal\n#'\n#' @param vcf_data_df\n#'\n#' @return vcf_data_df\n#'\nadd_read_support <- function(vcf_data_df){\n  for(v in c('DP_TUMOR','AF_TUMOR','DP_NORMAL','AF_NORMAL')){\n    vcf_data_df[v] <- NA\n  }\n  if(!is.null(vcf_data_df$ADT) && !is.null(vcf_data_df$ADC) && !is.null(vcf_data_df$DPT) && !is.null(vcf_data_df$DPC)){\n    tmp_tumor <- dplyr::select(tidyr::separate(vcf_data_df,ADT, c('refn','altn'),convert=T), refn, altn)\n    tmp_normal <- dplyr::select(tidyr::separate(vcf_data_df,ADC, c('refn','altn'),convert=T), refn, altn)\n\n    vcf_data_df$DP_TUMOR <- vcf_data_df$DPT\n    vcf_data_df$AF_TUMOR <- round(tmp_tumor$altn / vcf_data_df$DP_TUMOR, digits=4)\n    vcf_data_df$DP_NORMAL <- vcf_data_df$DPC\n    vcf_data_df$AF_NORMAL <- round(tmp_normal$altn / vcf_data_df$DP_NORMAL, digits=4)\n  }\n\n  return(vcf_data_df)\n}\n\n\n#' Function that adds SwissProt feature descriptions based on keys coming from pcgr pipeline\n#'\n#' @param vcf_data_df\n#'\n#' @return vcf_data_df\n#'\nadd_swissprot_feature_descriptions <- function(vcf_data_df){\n  rlogging::message(\"Extending annotation descriptions related to UniprotKB/SwissProt protein features\")\n  swissprot_features <- pcgr_data$swissprot_features\n  swissprot_features$UNIPROT_FEATURE <- paste(paste(swissprot_features$uniprot_id,swissprot_features$feature_type,sep=\":\"),paste(swissprot_features$aa_start,swissprot_features$aa_stop,sep=\"-\"),sep=\":\")\n  swissprot_features$PF <- paste(paste(swissprot_features$type_description,paste(swissprot_features$aa_start,swissprot_features$aa_stop,sep=\"-\"),sep=\":\"),swissprot_features$description,sep=\":\")\n\n  if(\"UNIPROT_FEATURE\" %in% colnames(vcf_data_df) & \"VAR_ID\" %in% colnames(vcf_data_df)){\n    feature_df <- dplyr::select(vcf_data_df,UNIPROT_FEATURE,VAR_ID) %>% dplyr::distinct()\n    if(nrow(feature_df) == 0){\n      vcf_data_df$PROTEIN_FEATURE <- NA\n      return(vcf_data_df)\n    }\n    feature_df <- feature_df %>% tidyr::separate_rows(UNIPROT_FEATURE,sep=\"&\")\n    feature_df <- as.data.frame(dplyr::left_join(feature_df,dplyr::select(swissprot_features,UNIPROT_FEATURE,PF),by=c(\"UNIPROT_FEATURE\")))\n    feature_df <- as.data.frame(dplyr::group_by(feature_df, VAR_ID) %>% dplyr::summarise(PROTEIN_FEATURE = paste(PF, collapse=\", \")))\n    if(nrow(feature_df) > 0){\n      if(nrow(feature_df[feature_df$PROTEIN_FEATURE == \"NA\",]) > 0){\n        feature_df[feature_df$PROTEIN_FEATURE == \"NA\",]$PROTEIN_FEATURE <- NA\n      }\n      vcf_data_df <- dplyr::left_join(dplyr::select(vcf_data_df,-UNIPROT_FEATURE),feature_df, by=c(\"VAR_ID\" = \"VAR_ID\"))\n    }\n    else{\n      vcf_data_df$PROTEIN_FEATURE <- NA\n    }\n  }\n  else{\n    vcf_data_df$PROTEIN_FEATURE <- NA\n  }\n\n  return(vcf_data_df)\n\n}\n\n#' Function that reads a VCF from pcgr pipeline\n#'\n#' @param vcf_gz_file\n#'\n#' @return vcf_data_df\n#'\nget_calls <- function(vcf_gz_file, sample_id = NULL){\n  if(!file.exists(vcf_gz_file) | file.size(vcf_gz_file) == 0){\n    rlogging::stop(paste0(\"File \",vcf_gz_file,\" does not exist or has zero size\"))\n  }\n  rlogging::message(paste0(\"Reading and parsing VEP/vcfanno-annotated VCF file - \",vcf_gz_file))\n  vcf_data_vr <- VariantAnnotation::readVcfAsVRanges(vcf_gz_file,genome = \"hg19\")\n  vcf_data_vr <- vcf_data_vr[!is.na(vcf_data_vr$GT) & !(vcf_data_vr$GT == '.'),]\n  vcf_data_vr <- pcgrr2::postprocess_vranges_info(vcf_data_vr)\n  vcf_data_df <- as.data.frame(vcf_data_vr)\n  if(!is.null(sample_id)){\n    vcf_data_df$VCF_SAMPLE_ID <- sample_id\n  }\n  rlogging::message(paste0(\"Number of variants read: \",nrow(vcf_data_df)))\n  if(any(grepl(paste0(\"VARIANT_CLASS$\"),names(vcf_data_df)))){\n    n_snvs <- nrow(vcf_data_df[vcf_data_df$VARIANT_CLASS == 'SNV',])\n    n_deletions <- nrow(vcf_data_df[vcf_data_df$VARIANT_CLASS == 'deletion',])\n    n_insertions <- nrow(vcf_data_df[vcf_data_df$VARIANT_CLASS == 'insertion',])\n    rlogging::message(paste0(\"Number of SNVs: \",n_snvs))\n    rlogging::message(paste0(\"Number of deletions: \",n_deletions))\n    rlogging::message(paste0(\"Number of insertions \",n_insertions))\n  }\n  if(nrow(vcf_data_df) == 0){\n    for(col in c('GENOME_VERSION','GENOMIC_CHANGE','PROTEIN_DOMAIN','PROTEIN_FEATURE','OTHER_LITERATURE_DOCM','OTHER_DISEASE_DOCM','GENENAME','GENE_NAME','CLINVAR_TRAITS_ALL','CLINVAR','COSMIC','DBSNP','KEGG_PATHWAY','ANTINEOPLASTIC_DRUG_INTERACTIONS')){\n      vcf_data_df[col] <- character(nrow(vcf_data_df))\n    }\n    for(col in c('DP_TUMOR','DP_NORMAL')){\n      vcf_data_df[col] <- integer(nrow(vcf_data_df))\n    }\n    for (col in c('AF_TUMOR','AF_NORMAL')){\n      vcf_data_df[col] <- numeric(nrow(vcf_data_df))\n    }\n    vcf_data_df <- dplyr::rename(vcf_data_df, CHROM = seqnames, POS = start, REF = ref, ALT = alt, CONSEQUENCE = Consequence, PROTEIN_CHANGE = HGVSp_short)\n    return(vcf_data_df)\n  }\n\n  vcf_data_df$GENOME_VERSION <- 'GRCh37'\n  vcf_data_df <- dplyr::rename(vcf_data_df, CHROM = seqnames, POS = start, REF = ref, ALT = alt, CONSEQUENCE = Consequence, PROTEIN_CHANGE = HGVSp_short)\n  vcf_data_df$GENOMIC_CHANGE <- paste(paste(paste(paste0(\"g.chr\",vcf_data_df$CHROM),vcf_data_df$POS,sep=\":\"),vcf_data_df$REF,sep=\":\"),vcf_data_df$ALT,sep=\">\")\n\n  vcf_data_df <- pcgrr2::add_pfam_domain_links(vcf_data_df)\n  vcf_data_df <- pcgrr2::add_swissprot_feature_descriptions(vcf_data_df)\n  vcf_data_df <- pcgrr2::add_read_support(vcf_data_df)\n  rlogging::message(\"Extending annotation descriptions related to Database of Curated Mutations (DoCM)\")\n  vcf_data_df <- dplyr::left_join(vcf_data_df, pcgr_data$docm_literature, by=c(\"VAR_ID\"))\n\n  gencode_xref <- dplyr::rename(pcgr_data$gene_xref, Gene = ensembl_gene_id, GENENAME = name, ENTREZ_ID = entrezgene)\n  gencode_xref <- gencode_xref %>% dplyr::filter(!is.na(Gene)) %>% dplyr::select(Gene,GENENAME,ENTREZ_ID) %>% dplyr::distinct()\n  gencode_xref$GENENAME <- stringr::str_replace(gencode_xref$GENENAME,\" \\\\[.{1,}$\",\"\")\n  gencode_xref$ENTREZ_ID <- as.character(gencode_xref$ENTREZ_ID)\n  gencode_xref <- dplyr::filter(gencode_xref, !is.na(GENENAME) & !is.na(ENTREZ_ID))\n\n  vcf_data_df <- dplyr::left_join(vcf_data_df,gencode_xref,by=c(\"ENTREZ_ID\",\"Gene\"))\n  vcf_data_df <- dplyr::left_join(vcf_data_df,pcgr_data$kegg_gene_pathway_links, by=c(\"ENTREZ_ID\" = \"gene_id\"))\n  vcf_data_df <- dplyr::rename(vcf_data_df, KEGG_PATHWAY = kegg_pathway_urls)\n\n  tmp <- dplyr::select(pcgr_data$clinvar, CLINVAR_TRAITS_ALL, CLINVAR_MSID, var_id)\n  tmp$var_id <- stringr::str_replace(tmp$var_id,\"chr\",\"\")\n  tmp <- dplyr::rename(tmp, VAR_ID = var_id)\n  if (\"CLINVAR_MSID\" %in% colnames(vcf_data_df)){\n    rlogging::message(\"Extending annotation descriptions related to ClinVar\")\n    vcf_data_df <- dplyr::left_join(vcf_data_df,tmp,by=c(\"CLINVAR_MSID\",\"VAR_ID\"))\n  }\n  if(\"COSMIC_SITE_HISTOLOGY\" %in% colnames(vcf_data_df)){\n    vcf_data_df$COSMIC_SITE_HISTOLOGY <- stringr::str_replace_all(vcf_data_df$COSMIC_SITE_HISTOLOGY,\"&\",\", \")\n  }\n  if(\"EFFECT_PREDICTIONS\" %in% colnames(vcf_data_df)){\n    vcf_data_df$EFFECT_PREDICTIONS <- stringr::str_replace_all(vcf_data_df$EFFECT_PREDICTIONS,\"\\\\.&|\\\\.$\",\"NA&\")\n    vcf_data_df$EFFECT_PREDICTIONS <- stringr::str_replace_all(vcf_data_df$EFFECT_PREDICTIONS,\"&$\",\"\")\n    vcf_data_df$EFFECT_PREDICTIONS <- stringr::str_replace_all(vcf_data_df$EFFECT_PREDICTIONS,\"&\",\", \")\n  }\n  if(\"INTOGEN_DRIVER_MUT\" %in% colnames(vcf_data_df)){\n    vcf_data_df$INTOGEN_DRIVER_MUT <- stringr::str_replace_all(vcf_data_df$INTOGEN_DRIVER_MUT,\"&\",\", \")\n  }\n  if(\"CANCER_CENSUS_SOMATIC\" %in% colnames(vcf_data_df)){\n    vcf_data_df$CANCER_CENSUS_SOMATIC <- stringr::str_replace_all(vcf_data_df$CANCER_CENSUS_SOMATIC,\"&\",\", \")\n  }\n  if(\"COSMIC_DRUG_RESISTANCE\" %in% colnames(vcf_data_df)){\n    vcf_data_df$COSMIC_DRUG_RESISTANCE <- stringr::str_replace_all(vcf_data_df$COSMIC_DRUG_RESISTANCE,\"&\",\", \")\n  }\n  if(\"VEP_ALL_CONSEQUENCE\" %in% colnames(vcf_data_df)){\n    vcf_data_df$VEP_ALL_CONSEQUENCE <- stringr::str_replace_all(vcf_data_df$VEP_ALL_CONSEQUENCE,\",\",\", \")\n  }\n  if(\"DOCM_DISEASE\" %in% colnames(vcf_data_df)){\n    vcf_data_df$DOCM_DISEASE <- stringr::str_replace_all(vcf_data_df$DOCM_DISEASE,\",\",\", \")\n  }\n\n  ## Add HTML links for COSMIC, DBSNP, DGIDB and CLINVAR entries\n  if(!(\"COSMIC\" %in% colnames(vcf_data_df))){\n    vcf_data_df <- pcgrr2::annotate_variant_link(vcf_data_df, vardb = 'COSMIC')\n    vcf_data_df <- dplyr::rename(vcf_data_df, COSMIC = COSMICLINK)\n  }\n  if(!(\"DBSNP\" %in% colnames(vcf_data_df))){\n    vcf_data_df <- pcgrr2::annotate_variant_link(vcf_data_df, vardb = 'DBSNP')\n    vcf_data_df <- dplyr::rename(vcf_data_df, DBSNP = DBSNPLINK)\n  }\n  if(!(\"CLINVAR\" %in% colnames(vcf_data_df))){\n    vcf_data_df <- pcgrr2::annotate_variant_link(vcf_data_df, vardb = 'CLINVAR')\n    vcf_data_df <- dplyr::rename(vcf_data_df, CLINVAR = CLINVARLINK)\n  }\n  if(!(\"ANTINEOPLASTIC_DRUG_INTERACTIONS\" %in% colnames(vcf_data_df))){\n    vcf_data_df <- pcgrr2::annotate_variant_link(vcf_data_df, vardb = 'DGIDB')\n    vcf_data_df <- dplyr::rename(vcf_data_df, ANTINEOPLASTIC_DRUG_INTERACTIONS = DGIDBLINK)\n  }\n  if(!(\"GENE_NAME\" %in% colnames(vcf_data_df))){\n    vcf_data_df <- pcgrr2::annotate_variant_link(vcf_data_df, vardb = 'NCBI_GENE')\n    vcf_data_df <- dplyr::rename(vcf_data_df, GENE_NAME = NCBI_GENE_LINK)\n  }\n\n  return(vcf_data_df)\n\n}\n\n#' Function that filters a data frame with variants according to population-specific germline frequencies\n#'\n#' @param var_df data frame with variants\n#' @param pop population ('european' or 'global')\n#' @param dbquery '1KG' or 'ExAC'\n#' @param min_af minimum allele frequency required for variant to be filtered\n#'\n#' @return var_df\n#'\n\nfilter_db_germline_variants <- function(var_df, pop='european',dbquery = '1KG', min_af = 0.05){\n\n  if(pop == 'nor'){\n    if(any(grepl(paste0(\"^AF_NOR$\"),names(var_df)))){\n      var_df <- var_df %>% dplyr::filter(is.na(AF_NOR) | AF_NOR < min_af)\n    }\n  }\n  else{\n    if(pop == 'european' | pop == 'global'){\n      if(dbquery == '1KG'){\n        if(any(grepl(paste0(\"^EUR_AF_1KG$\"),names(var_df)))){\n          var_df <- var_df %>% dplyr::filter(is.na(EUR_AF_1KG) | EUR_AF_1KG < min_af)\n        }\n      }\n      else{\n        if(any(grepl(paste0(\"^NFE_AF_EXAC$\"),names(var_df)))){\n          var_df <- var_df %>% dplyr::filter(is.na(NFE_AF_EXAC) | NFE_AF_EXAC < min_af)\n        }\n      }\n    }\n    if(pop == 'global'){\n      if(dbquery == '1KG'){\n        pop_tags <- c('EAS_AF_1KG','AMR_AF_1KG','AFR_AF_1KG','SAS_AF_1KG')\n        for(poptag in pop_tags){\n          if(any(grepl(paste0(\"^\",poptag,\"$\"),names(var_df)))){\n            var_df <- var_df[is.na(var_df[poptag]) | var_df[poptag] < min_af,]\n          }\n        }\n      }\n      else{\n        pop_tags <- c('SAS_AF_EXAC','EAS_AF_EXAC','AMR_AF_EXAC','AFR_AF_EXAC','FIN_AF_EXAC','OTH_AF_EXAC')\n        for(poptag in pop_tags){\n          if(any(grepl(paste0(\"^\",poptag,\"$\"),names(var_df)))){\n            var_df <- var_df[is.na(var_df[poptag]) | var_df[poptag] < min_af,]\n          }\n        }\n      }\n    }\n  }\n  return(var_df)\n}\n\n\n#' Function that assigns a category ('Rare','Common' etc) to population-specific germline frequencies\n#'\n#' @param var_df data frame with variants\n#' @param pop_af_column population_column\n#'\n#' @return var_df\n#'\nassign_poplevel_frequency_class <- function(var_df, pop_af_column){\n\n  if(any(grepl(paste0(\"^\",pop_af_column,\"$\"),names(var_df)))){\n    if(nrow(var_df[!is.na(var_df[pop_af_column]) & var_df[pop_af_column] >= 0.05,]) > 0){\n      var_df[(!is.na(var_df[pop_af_column]) & var_df[pop_af_column] >= 0.05),]$pop_common <- 'Common'\n    }\n    if(nrow(var_df[(!is.na(var_df[pop_af_column]) & var_df[pop_af_column] >= 0.01 & var_df[pop_af_column] < 0.05),]) > 0){\n      var_df[(!is.na(var_df[pop_af_column]) & var_df[pop_af_column] >= 0.01 & var_df[pop_af_column] < 0.05),]$pop_lowfreq <- 'LowFreq'\n    }\n    if(nrow(var_df[(!is.na(var_df[pop_af_column]) & var_df[pop_af_column] >= 0.001 & var_df[pop_af_column] < 0.01),]) > 0){\n      var_df[(!is.na(var_df[pop_af_column]) & var_df[pop_af_column] >= 0.001 & var_df[pop_af_column] < 0.01),]$pop_rare <- 'Rare'\n    }\n    if(nrow(var_df[!is.na(var_df[pop_af_column]) & var_df[pop_af_column] < 0.001 & var_df[pop_af_column] > 0,]) > 0){\n      var_df[(!is.na(var_df[pop_af_column]) & var_df[pop_af_column] < 0.001 & var_df[pop_af_column] > 0),]$pop_veryrare <- 'VeryRare'\n    }\n    if(nrow(var_df[!is.na(var_df[pop_af_column]) & var_df[pop_af_column] == 0.00,]) > 0){\n      var_df[(!is.na(var_df[pop_af_column]) & var_df[pop_af_column] == 0.00),]$pop_monomorphic <- 'Monomorphic'\n    }\n  }\n  return(var_df)\n\n}\n\n#' Function that assigns a category ('Rare','Common' etc) to population-specific germline frequencies\n#'\n#' @param var_df data frame with variants\n#' @param dbquery 1KG or ExAC\n#' @param pop population\n#' @param result_tag name of result column\n#'\n#' @return var_df\n#'\nassign_poplevel_frequency <- function(var_df, dbquery='1KG', pop='european', result_tag = 'FREQ_EXAC_EUROPEAN'){\n\n  var_df$pop_monomorphic <- rep(NA,nrow(var_df))\n  var_df$pop_common <- rep(NA,nrow(var_df))\n  var_df$pop_rare <- rep(NA,nrow(var_df))\n  var_df$pop_veryrare <- rep(NA,nrow(var_df))\n  var_df$pop_lowfreq <- rep(NA,nrow(var_df))\n\n  pop_db <- data.frame('population' = 'american','db' = '1KG', 'tag' = 'AMR_AF_1KG', stringsAsFactors = F)\n  pop_db <- rbind(pop_db, data.frame('population' = 'african', 'db' = '1KG', 'tag' = 'AFR_AF_1KG'))\n  pop_db <- rbind(pop_db, data.frame('population' = 'global', 'db' = '1KG', 'tag' = 'GLOBAL_AF_1KG'))\n  pop_db <- rbind(pop_db, data.frame('population' = 'european', 'db' = '1KG', 'tag' = 'EUR_AF_1KG'))\n  pop_db <- rbind(pop_db, data.frame('population' = 'east_asian', 'db' = '1KG', 'tag' = 'EAS_AF_1KG'))\n  pop_db <- rbind(pop_db, data.frame('population' = 'south_asian', 'db' = '1KG','tag' = 'SAS_AF_1KG'))\n  pop_db <- rbind(pop_db, data.frame('population' = 'african', 'db' = 'ExAC', 'tag' = 'AFR_AF_EXAC'))\n  pop_db <- rbind(pop_db, data.frame('population' = 'american', 'db' = 'ExAC', 'tag' = 'AMR_AF_EXAC'))\n  pop_db <- rbind(pop_db, data.frame('population' = 'european', 'db' = 'ExAC', 'tag' = 'NFE_AF_EXAC'))\n  pop_db <- rbind(pop_db, data.frame('population' = 'east_asian', 'db' = 'ExAC', 'tag' = 'EAS_AF_EXAC'))\n  pop_db <- rbind(pop_db, data.frame('population' = 'south_asian', 'db' = 'ExAC','tag' = 'SAS_AF_EXAC'))\n  pop_db <- rbind(pop_db, data.frame('population' = 'global', 'db' = 'ExAC','tag' = 'GLOBAL_AF_EXAC'))\n\n  tags <- character()\n  tags <- c(dplyr::filter(pop_db, population == pop & db == dbquery)$tag)\n  for(i in 1:length(tags)){\n    var_df <- assign_poplevel_frequency_class(var_df, tags[i])\n  }\n  var_df[result_tag] <- stringr::str_replace_all(stringr::str_replace_all(paste(var_df$pop_monomorphic,var_df$pop_rare,var_df$pop_veryrare,var_df$pop_lowfreq,var_df$pop_common,sep=\",\"), \"(,{0,}NA(,){0,}){1,}\",\",\"),\"(^,)|(,$)\",\"\")\n  var_df[nchar(var_df[,result_tag]) == 0,result_tag] <- NA\n\n  var_df <- dplyr::select(var_df, -pop_monomorphic, -pop_common, -pop_rare, -pop_veryrare, -pop_lowfreq)\n  return(var_df)\n}\n\n",
    "created" : 1489670985189.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "14|33|86|0|\n96|95|112|0|\n130|294|214|0|\n224|137|332|0|\n341|73|359|0|\n372|132|428|0|\n440|124|607|0|\n617|82|731|0|\n739|41|791|0|\n799|47|826|0|\n997|42|1012|0|\n1021|60|1052|0|\n1060|53|1170|0|\n1182|95|1222|0|\n1232|67|1253|0|\n1264|112|1295|0|\n",
    "hash" : "2455790870",
    "id" : "E8E36AE2",
    "lastKnownWriteTime" : 1489756964,
    "last_content_update" : 1489756964318,
    "path" : "~/research/docker/pcgr/src/R/pcgrr2/R/utils.R",
    "project_path" : "R/utils.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}