cna_segments <- dplyr::rename(cna_segments, SEGMENT_LENGTH = segment_length, SEGMENT = segment_link)
cna_segments <- dplyr::select(cna_segments, SEGMENT, SEGMENT_LENGTH, LogR) %>% dplyr::distinct()
cna_segments_filtered <- dplyr::filter(segments, LogR >= logR_threshold_amplification | LogR <= logR_threshold_homozygous_deletion)
cna_segments_filtered <- cna_segments_filtered %>% dplyr::arrange(desc(LogR))
rlogging::message(paste0("Detected ",nrow(cna_segments_filtered)," segments subject to amplification/deletion"))
cna_segments_filtered <- dplyr::filter(cna_segments, LogR >= logR_threshold_amplification | LogR <= logR_threshold_homozygous_deletion)
cna_segments_filtered <- cna_segments_filtered %>% dplyr::arrange(desc(LogR))
rlogging::message(paste0("Detected ",nrow(cna_segments_filtered)," segments subject to amplification/deletion"))
getwd()
project_directory <- '/Users/sigven/research/docker/pcgr/examples'
query_vcf <- 'tumor_sample.COAD.pcgr.vcf.gz'
sample_name <- 'test_pcgrr2'
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
query_vcf <- paste0(getwd(),"/",tumor_sample.COAD.pcgr.vcf.gz)
query_vcf <- paste0(getwd(),"/",'tumor_sample.COAD.pcgr.vcf.gz')
query_vcf
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
query_vcf <- paste0(project_directory,"/",'tumor_sample.COAD.pcgr.vcf.gz')
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
library(deconstructSigs)
suppressWarnings(suppressPackageStartupMessages(library(magrittr)))
suppressWarnings(suppressPackageStartupMessages(library(BSgenome.Hsapiens.UCSC.hg19)))
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgr_data$tier2_tags_display
pcgr_data$tier2_tags_display
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
help(formatStyle)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
query_vcf <- '/Users/sigven/research/docker/examples/tumor_sample.BRCA.pcgr.vcf.gz'
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
query_vcf <- '/Users/sigven/research/docker/pcgr/examples/tumor_sample.BRCA.pcgr.vcf.gz'
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
cna_segments_tsv <- '/Users/sigven/research/docker/pcgr/examples/tumor_sample.BRCA.cna.tsv'
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8, cna_segments_tsv = cna_segments_tsv)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8, cna_segments_tsv = cna_segments_tsv)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8, cna_segments_tsv = cna_segments_tsv)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8, cna_segments_tsv = cna_segments_tsv)
library(rmarkdown)
help(render)
library(pcgrr2)
library(pcgrr2)
project_directory <- '/Users/sigven/research/docker/pcgr/output'
setwd(project_directory)
query_vcf <- 'tumor_sample.BRCA.pcgr.vcf.gz'
cna_segments_tsv <- '../examples/tumor_sample.BRCA.cna.tsv'
sample_name <- 'tumor_sample.BRCA'
print_biomarkers <- TRUE
print_tier_variants <- TRUE
print_mutational_signatures <- TRUE
print_cna_segments <- TRUE
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
load('/Users/sigven/research/docker/pcgr/data/rda/pcgr_data.rda')
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
suppressWarnings(suppressPackageStartupMessages(library(pcgrr2)))
suppressWarnings(suppressPackageStartupMessages(library(magrittr)))
suppressWarnings(suppressPackageStartupMessages(library(BSgenome.Hsapiens.UCSC.hg19)))
suppressWarnings(suppressPackageStartupMessages(library(deconstructSigs)))
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
query_vcf
getw()
getwd()
project_directory
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
setwd('/Users/sigven/research/docker/pcgr/output')
query_vcf <- 'tumor_sample.BRCA.pcgr.vcf.gz'
sample_name <- 'tumor_sample.BRCA'
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
load('/Users/sigven/research/docker/pcgr/data/rda/pcgr_data.rda')
suppressWarnings(suppressPackageStartupMessages(library(pcgrr2)))
suppressWarnings(suppressPackageStartupMessages(library(magrittr)))
suppressWarnings(suppressPackageStartupMessages(library(BSgenome.Hsapiens.UCSC.hg19)))
suppressWarnings(suppressPackageStartupMessages(library(deconstructSigs)))
cna_segments_tsv <- '../examples/tumor_sample.BRCA.cna.tsv'
project_directory <- getwd()
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
getwd()
setwd('/Users/sigven/research/docker/pcgr/output')
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
getwd()
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
getwd()
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = NULL, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = NULL, sample_name = sample_name)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'None', 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'None', 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
library(pcgrr2)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'None', 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'None', 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
rmarkdown::render('test.Rmd', params = list(tier1_report = TRUE))
rmarkdown::render('test.Rmd', params = list(tier1_report = TRUE))
rmarkdown::render('test.Rmd', params = list(tier1_report = FALSE))
getwd()
cna_segments_tsv <- '/Users/sigven/research/docker/pcgr/examples/tumor_sample.BRCA.cna.tsv'
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'None', 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'None', 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'None', 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
library(pcgrr2)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'None', 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
getwd()
setwd('/Users/sigven/research/docker/pcgr/output')
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'tumor_sample.BRCA.pcgr.vcf.gz', 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
install.packages(c("curl", "DBI", "dendextend", "jsonlite", "lattice", "matrixStats", "psych", "readr", "rmarkdown", "shiny", "sjmisc", "sourcetools", "stringi", "survival", "tibble", "vegan", "viridis", "viridisLite", "XML"))
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
install.packages(c("curl", "DBI", "dendextend", "jsonlite", "lattice", "matrixStats", "psych", "readr", "rmarkdown", "shiny", "sjmisc", "sourcetools", "stringi", "survival", "tibble", "vegan", "viridis", "viridisLite", "XML"))
install.packages(c("lattice", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c("curl", "DBI", "dendextend", "jsonlite", "lattice", "matrixStats", "psych", "readr", "rmarkdown", "shiny", "sjmisc", "sourcetools", "stringi", "survival", "tibble", "vegan", "viridis", "viridisLite", "XML"))
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'tumor_sample.BRCA.pcgr.vcf.gz', 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'tumor_sample.BRCA.pcgr.vcf.gz', 0.8, -0.8, cna_segments_tsv = NULL, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'tumor_sample.BRCA.pcgr.vcf.gz', 0.8, -0.8, cna_segments_tsv = NULL, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'tumor_sample.BRCA.pcgr.vcf.gz', 0.8, -0.8, cna_segments_tsv = NULL, sample_name = sample_name)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'tumor_sample.BRCA.pcgr.vcf.gz', 0.8, -0.8, cna_segments_tsv = NULL, sample_name = sample_name)
report_data <- list(tier1_report = FALSE, tier2_report = FALSE, tier3_report = FALSE, tier4_report = FALSE, tier5_report = FALSE, signature_report = FALSE, missing_signature_data = FALSE, cna_report_oncogene_gain = FALSE, cna_report_tsgene_loss = FALSE, cna_report_biomarkers = FALSE, cna_report_segments = FALSE)
report_data
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
signatures_limit <- 6
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data
report_data$tier1_report
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'tumor_sample.BRCA.pcgr.vcf.gz', 0.8, -0.8, cna_segments_tsv = NULL, sample_name = sample_name)
params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report)
params
logR_threshold_homozygous_deletion <- -0.8
logR_threshold_amplification <- 0.8
params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report)
params
params$tier1_report
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data$sample_name <- sample_name
report_data$cna_report_tsgene_loss <- FALSE
report_data$cna_report_oncogene_gain <- FALSE
report_data$cna_report_biomarkers <- FALSE
report_data$cna_report_segments <- FALSE
report_data$cna_report_tsgene_loss
params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report)
params
help(render)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'tumor_sample.BRCA.pcgr.vcf.gz', 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'tumor_sample.BRCA.pcgr.vcf.gz', 0.8, -0.8, cna_segments_tsv = NULL, sample_name = sample_name)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'tumor_sample.BRCA.pcgr.vcf.gz', 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
query_vcf <- paste0(project_directory,'/',query_vcf)
query_vcf
setwd('/Users/sigven/research/docker')
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = 'tumor_sample.BRCA.pcgr.vcf.gz', 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
sessionInfo()
getwd()
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
sessionInfo()
report_data <- list(tier1_report = FALSE, tier2_report = FALSE, tier3_report = FALSE, tier4_report = FALSE, tier5_report = FALSE, signature_report = FALSE, missing_signature_data = FALSE, cna_report_oncogene_gain = FALSE, cna_report_tsgene_loss = FALSE, cna_report_biomarkers = FALSE, cna_report_segments = FALSE, missing_signature_data = FALSE)
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data$sample_name <- sample_name
report_data$cna_report_tsgene_loss <- TRUE
report_data$cna_report_oncogene_gain <- TRUE
report_data$cna_report_biomarkers <- TRUE
report_data$cna_report_segments <- TRUE
cna_data <- pcgrr2::cna_segment_annotation(cna_segments_tsv, logR_threshold_amplification, logR_threshold_homozygous_deletion, format='tcga')
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data)
)
rm(params)
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
library(knitr)
help("opts_chunk")
getwd()
rmarkdown::render(system.file("templates","Test.Rmd", package="pcgrr2"), output_file = 'test.html', output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report))
getwd()
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
rmarkdown::render(system.file("templates","Test.Rmd", package="pcgrr2"), output_file = 'test.html', output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report))
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
rmarkdown::render(system.file("templates","Test.Rmd", package="pcgrr2"), output_file = 'test.html', output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report))
rmarkdown::render(system.file("templates","Test.Rmd", package="pcgrr2"), output_file = 'test.html', output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = TRUE))
rmarkdown::render(system.file("templates","Test.Rmd", package="pcgrr2"), output_file = 'test.html', output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = FALSE))
cna_data <- NULL
nrow(cna_data$ranked_segments)
help(knit)
rmarkdown::render(system.file("templates","Test.Rmd", package="pcgrr2"), output_file = 'test.html', output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = FALSE),envir = globalenv())
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
report_data$clinical_evidence_items_tier1A
colnames(report_data$clinical_evidence_items_tier1A)
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data$sample_name <- sample_name
colnames(report_data$clinical_evidence_items_tier1A)
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
cna_data <- data.frame()
cna_data$ranked_segments <- NULL
cna_data
cna_data <- list(ranked_segments = data.frame(), oncogene_amplified = data.frame(), tsgene_homozygous_deletion = data.frame(),cna_df_for_print = data.frame(), cna_biomarkers = data.frame(), cna_biomarker_segments = data.frame())
cna_data
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data$sample_name <- sample_name
report_data$cna_report_tsgene_loss <- FALSE
report_data$cna_report_oncogene_gain <- FALSE
report_data$cna_report_biomarkers <- FALSE
report_data$cna_report_segments <- FALSE
cna_data <- list(ranked_segments = data.frame(), oncogene_amplified = data.frame(), tsgene_homozygous_deletion = data.frame(),cna_df_for_print = data.frame(), cna_biomarkers = data.frame(), cna_biomarker_segments = data.frame())
report_data$tier1_report
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data$sample_name <- sample_name
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data$sample_name <- sample_name
cna_data <- list(ranked_segments = data.frame(), oncogene_amplified = data.frame(), tsgene_homozygous_deletion = data.frame(),cna_df_for_print = data.frame(), cna_biomarkers = data.frame(), cna_biomarker_segments = data.frame())
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
cna_data
cna_data$ranked_segments
nrow(cna_data$ranked_segments)
report_data$tier1_report
cna_data$ranked_segments
myOptions <- list(paging = F, searching=F,caching=F)
if(nrow(cna_data$ranked_segments) >= 10){
myOptions <- list(paging = T,pageLength=10, searching=F,caching=F)
}
if(nrow(cna_data$ranked_segments) > 0){
DT::datatable(cna_data$ranked_segments, options = myOptions, escape=F, extensions = "Responsive") %>% DT::formatStyle('LogR',color='white', backgroundColor = DT::styleInterval(logR_threshold_homozygous_deletion, c('red', '#009E73')))
}
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = sample_name)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = NULL, sample_name = sample_name)
report_data <- list(tier1_report = FALSE, tier2_report = FALSE, tier3_report = FALSE, tier4_report = FALSE, tier5_report = FALSE, signature_report = FALSE, missing_signature_data = FALSE, cna_report_oncogene_gain = FALSE, cna_report_tsgene_loss = FALSE, cna_report_biomarkers = FALSE, cna_report_segments = FALSE, missing_signature_data = FALSE)
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data$sample_name <- sample_name
report_data$cna_report_tsgene_loss <- FALSE
report_data$cna_report_oncogene_gain <- FALSE
report_data$cna_report_biomarkers <- FALSE
report_data$cna_report_segments <- FALSE
cna_data <- list(ranked_segments = data.frame(), oncogene_amplified = data.frame(), tsgene_homozygous_deletion = data.frame(),cna_df_for_print = data.frame(), cna_biomarkers = data.frame(), cna_biomarker_segments = data.frame())
cna_segments_tsv
cna_segments_tsv <- NULL
tmp <- list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data)
tmp
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
report_data <- list(tier1_report = FALSE, tier2_report = FALSE, tier3_report = FALSE, tier4_report = FALSE, tier5_report = FALSE, signature_report = FALSE, missing_signature_data = FALSE, cna_report_oncogene_gain = FALSE, cna_report_tsgene_loss = FALSE, cna_report_biomarkers = FALSE, cna_report_segments = FALSE, missing_signature_data = FALSE)
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data$sample_name <- sample_name
report_data$cna_report_tsgene_loss <- FALSE
report_data$cna_report_oncogene_gain <- FALSE
report_data$cna_report_biomarkers <- FALSE
report_data$cna_report_segments <- FALSE
cna_data <- list(ranked_segments = data.frame(), oncogene_amplified = data.frame(), tsgene_homozygous_deletion = data.frame(),cna_df_for_print = data.frame(), cna_biomarkers = data.frame(), cna_biomarker_segments = data.frame())
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
report_data <- list(tier1_report = FALSE, tier2_report = FALSE, tier3_report = FALSE, tier4_report = FALSE, tier5_report = FALSE, signature_report = FALSE, missing_signature_data = FALSE, cna_report_oncogene_gain = FALSE, cna_report_tsgene_loss = FALSE, cna_report_biomarkers = FALSE, cna_report_segments = FALSE, missing_signature_data = FALSE)
tier_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.tiers.tsv')
msig_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.mutational_signatures.tsv')
biomarker_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.biomarkers.tsv')
cna_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.cna_segments.tsv')
maf_fname <- paste0(project_directory, '/',sample_name,'.pcgr.maf')
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data$sample_name <- sample_name
report_data$cna_report_tsgene_loss <- FALSE
report_data$cna_report_oncogene_gain <- FALSE
report_data$cna_report_biomarkers <- FALSE
report_data$cna_report_segments <- FALSE
cna_data <- list(ranked_segments = data.frame(), oncogene_amplified = data.frame(), tsgene_homozygous_deletion = data.frame(),cna_df_for_print = data.frame(), cna_biomarkers = data.frame(), cna_biomarker_segments = data.frame())
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
library(pcgrr2)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
report_data <- list(tier1_report = FALSE, tier2_report = FALSE, tier3_report = FALSE, tier4_report = FALSE, tier5_report = FALSE, signature_report = FALSE, missing_signature_data = FALSE, cna_report_oncogene_gain = FALSE, cna_report_tsgene_loss = FALSE, cna_report_biomarkers = FALSE, cna_report_segments = FALSE, missing_signature_data = FALSE)
tier_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.tiers.tsv')
msig_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.mutational_signatures.tsv')
biomarker_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.biomarkers.tsv')
cna_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.cna_segments.tsv')
maf_fname <- paste0(project_directory, '/',sample_name,'.pcgr.maf')
project_directory <- '/Users/sigven/research/docker/pcgr/output'
report_data <- list(tier1_report = FALSE, tier2_report = FALSE, tier3_report = FALSE, tier4_report = FALSE, tier5_report = FALSE, signature_report = FALSE, missing_signature_data = FALSE, cna_report_oncogene_gain = FALSE, cna_report_tsgene_loss = FALSE, cna_report_biomarkers = FALSE, cna_report_segments = FALSE, missing_signature_data = FALSE)
tier_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.tiers.tsv')
msig_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.mutational_signatures.tsv')
biomarker_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.biomarkers.tsv')
cna_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.cna_segments.tsv')
maf_fname <- paste0(project_directory, '/',sample_name,'.pcgr.maf')
sample_name <- 'tumor_sample.BRCA'
report_data <- list(tier1_report = FALSE, tier2_report = FALSE, tier3_report = FALSE, tier4_report = FALSE, tier5_report = FALSE, signature_report = FALSE, missing_signature_data = FALSE, cna_report_oncogene_gain = FALSE, cna_report_tsgene_loss = FALSE, cna_report_biomarkers = FALSE, cna_report_segments = FALSE, missing_signature_data = FALSE)
tier_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.tiers.tsv')
msig_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.mutational_signatures.tsv')
biomarker_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.biomarkers.tsv')
cna_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.cna_segments.tsv')
maf_fname <- paste0(project_directory, '/',sample_name,'.pcgr.maf')
setwd(project_directory)
query_vcf <- 'tumor_sample.BRCA.pcgr.vcf.gz'
cna_segments_tsv <- NULL
signatures_limit <- 6
logR_threshold_amplification <- 0.8
logR_threshold_homozygous_deletion <- -0.8
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data$sample_name <- sample_name
load('../data/rda/pcgr_data.rda')
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data$sample_name <- sample_name
report_data$cna_report_tsgene_loss <- FALSE
report_data$cna_report_oncogene_gain <- FALSE
report_data$cna_report_biomarkers <- FALSE
report_data$cna_report_segments <- FALSE
cna_data <- list(ranked_segments = data.frame(), oncogene_amplified = data.frame(), tsgene_homozygous_deletion = data.frame(),cna_df_for_print = data.frame(), cna_biomarkers = data.frame(), cna_biomarker_segments = data.frame())
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
detach("package:pcgrr2", unload=TRUE)
report_data <- list(tier1_report = FALSE, tier2_report = FALSE, tier3_report = FALSE, tier4_report = FALSE, tier5_report = FALSE, signature_report = FALSE, missing_signature_data = FALSE, cna_report_oncogene_gain = FALSE, cna_report_tsgene_loss = FALSE, cna_report_biomarkers = FALSE, cna_report_segments = FALSE, missing_signature_data = FALSE)
tier_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.tiers.tsv')
msig_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.mutational_signatures.tsv')
biomarker_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.biomarkers.tsv')
cna_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.cna_segments.tsv')
maf_fname <- paste0(project_directory, '/',sample_name,'.pcgr.maf')
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data$sample_name <- sample_name
report_data$cna_report_tsgene_loss <- FALSE
report_data$cna_report_oncogene_gain <- FALSE
report_data$cna_report_biomarkers <- FALSE
report_data$cna_report_segments <- FALSE
cna_data <- list(ranked_segments = data.frame(), oncogene_amplified = data.frame(), tsgene_homozygous_deletion = data.frame(),cna_df_for_print = data.frame(), cna_biomarkers = data.frame(), cna_biomarker_segments = data.frame())
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
cna_segments_tsv <- '/Users/sigven/research/docker/pcgr/examples/tumor_sample.BRCA.cna.tsv'
project_directory <- '/Users/sigven/research/docker/pcgr/output'
cna_segments_tsv <- '/Users/sigven/research/docker/pcgr/examples/tumor_sample.BRCA.cna.tsv'
signaturs_limit <- 6
load('../data/rda/pcgr_data.rda')
signatures_limit <- 6
setwd(project_directory)
query_vcf <- 'tumor_sample.BRCA.pcgr.vcf.gz'
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
logR_threshold_amplification <- 0.8
logR_threshold_homozygous_deletion <- -0.8
report_data <- list(tier1_report = FALSE, tier2_report = FALSE, tier3_report = FALSE, tier4_report = FALSE, tier5_report = FALSE, signature_report = FALSE, missing_signature_data = FALSE, cna_report_oncogene_gain = FALSE, cna_report_tsgene_loss = FALSE, cna_report_biomarkers = FALSE, cna_report_segments = FALSE, missing_signature_data = FALSE)
tier_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.tiers.tsv')
msig_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.mutational_signatures.tsv')
biomarker_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.biomarkers.tsv')
cna_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.cna_segments.tsv')
maf_fname <- paste0(project_directory, '/',sample_name,'.pcgr.maf')
sample_name <- 'tumor_sample.BRCA'
report_data <- list(tier1_report = FALSE, tier2_report = FALSE, tier3_report = FALSE, tier4_report = FALSE, tier5_report = FALSE, signature_report = FALSE, missing_signature_data = FALSE, cna_report_oncogene_gain = FALSE, cna_report_tsgene_loss = FALSE, cna_report_biomarkers = FALSE, cna_report_segments = FALSE, missing_signature_data = FALSE)
tier_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.tiers.tsv')
msig_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.mutational_signatures.tsv')
biomarker_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.biomarkers.tsv')
cna_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.cna_segments.tsv')
maf_fname <- paste0(project_directory, '/',sample_name,'.pcgr.maf')
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data$sample_name <- sample_name
report_data$cna_report_tsgene_loss <- FALSE
report_data$cna_report_oncogene_gain <- FALSE
report_data$cna_report_biomarkers <- FALSE
report_data$cna_report_segments <- FALSE
cna_data <- list(ranked_segments = data.frame(), oncogene_amplified = data.frame(), tsgene_homozygous_deletion = data.frame(),cna_df_for_print = data.frame(), cna_biomarkers = data.frame(), cna_biomarker_segments = data.frame())
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
rm(eval_tier1)
rm(eval_tier2)
rm(eval_tier3)
rm(eval_tier4)
rm(eval_tier5)
rm(eval_cna_biomarker)
rm(eval_cna_gain)
rm(eval_cna_loss)
rm(eval_cna_segments)
rm(eval_missing_signature_data)
rm(eval_signature_report)
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
report_data <- list(tier1_report = FALSE, tier2_report = FALSE, tier3_report = FALSE, tier4_report = FALSE, tier5_report = FALSE, signature_report = FALSE, missing_signature_data = FALSE, cna_report_oncogene_gain = FALSE, cna_report_tsgene_loss = FALSE, cna_report_biomarkers = FALSE, cna_report_segments = FALSE, missing_signature_data = FALSE)
tier_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.tiers.tsv')
msig_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.mutational_signatures.tsv')
biomarker_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.snvs_indels.biomarkers.tsv')
cna_tsv_fname <- paste0(project_directory, '/',sample_name,'.pcgr.cna_segments.tsv')
maf_fname <- paste0(project_directory, '/',sample_name,'.pcgr.maf')
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data$sample_name <- sample_name
rm(eval_tier1)
rm(eval_tier2)
rm(eval_tier3)
rm(eval_tier4)
rm(eval_cna_biomarker)
rm(eval_cna_gain)
rm(eval_cna_loss)
rm(eval_cna_segments)
rm(eval_tier5)
rm(eval_signature_report)
rm(eval_missing_signature_data)
report_data$cna_report_tsgene_loss <- FALSE
report_data$cna_report_oncogene_gain <- FALSE
report_data$cna_report_biomarkers <- FALSE
report_data$cna_report_segments <- FALSE
rmarkdown::render(system.file("templates","report.Rmd", package="pcgrr2"), output_file = paste0(sample_name,'.pcgr.html'), output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report, tier2_report = report_data$tier2_report, tier3_report = report_data$tier3_report, tier4_report = report_data$tier4_report, tier5_report = report_data$tier5_report, cna_report_tsgene_loss = report_data$cna_report_tsgene_loss, cna_report_oncogene_gain = report_data$cna_report_oncogene_gain, cna_report_biomarkers = report_data$cna_report_biomarkers, cna_report_segments = report_data$cna_report_segments, signature_report = report_data$signature_report, missing_signature_data = report_data$missing_signature_data))
rmarkdown::render(system.file("templates","Test.Rmd", package="pcgrr2"), output_file = 'test.html', output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report))
library(pcgrr2)
rmarkdown::render(system.file("templates","Test.Rmd", package="pcgrr2"), output_file = 'test.html', output_dir = project_directory, intermediates_dir = project_directory, params = list(logR_threshold_amplification = logR_threshold_amplification, logR_threshold_homozygous_deletion = logR_threshold_homozygous_deletion, tier1_report = report_data$tier1_report))
project_directory <- '~/research/docker/pcgr/output'
rmarkdown::render(system.file("templates","Test.Rmd", package="pcgrr2"), output_file = 'test.html', output_dir = project_directory, intermediates_dir = project_directory, params = list(tier1_report = F))
library(pcgrr2)
load('../data/rda/pcgr_data.rda')
sample_name <- 'tumor_sample.BRCA'
query_vcf <- 'tumor_sample.BRCA.pcgr.vcf.gz'
getwd()
cna_segments_tsv <- '~/research/docker/pcgr/examples/tumor_sample.BRCA.cna.tsv'
generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = 'tumor_sample.BRCA')
generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = 'tumor_sample.BRCA')
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
help(globalenv)
eval_tier1 <- globalenv(FALSE)
help(render)
help("parent.env")
generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = 'tumor_sample.BRCA')
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = 'tumor_sample.BRCA')
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = 'tumor_sample.BRCA')
detach("package:pcgrr2", unload=TRUE)
library("pcgrr2", lib.loc="~/Library/R/3.3/library")
generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = 'tumor_sample.BRCA')
eval_tier1 <- FALSE
eval_tier2 <- FALSE
eval_tier3 <- FALSE
eval_tier4 <- FALSE
eval_tier5 <- FALSE
eval_signature_report <- FALSE
eval_missing_signature_data <- FALSE
eval_cna_segments <- FALSE
eval_cna_loss <- FALSE
eval_cna_gain <- FALSE
eval_cna_biomarker <- FALSE
generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, 0.8, -0.8, cna_segments_tsv = cna_segments_tsv, sample_name = 'tumor_sample.BRCA')
cna_biomarkers <- data.frame()
nrow<(cna_biomarkers)
nrow(cna_biomarkers)
