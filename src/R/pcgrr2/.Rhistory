library(pcgrr)
library(pcgrr2)
df <- data.frame('CIVIC_ID' = character())
df <- rbind(df, data.frame('CIVIC_ID' = 'EID1'))
df
df <- rbind(df, data.frame('CIVIC_ID' = 'EID2'))
df
stringr::str_detect(df$CIVIC_ID,"EID")
if(stringr::str_detect(df$CIVIC_ID,"EID")){}
if(any(stringr::str_detect(df$CIVIC_ID,"EID"))){}
if(any(stringr::str_detect(df$CIVIC_ID,"EID"))){
cat('balle\n')
}
library(pcgrr2)
pfam <- list('version' = 'Pfam 31.0 (March 2017)')
pfam$version
pfam <- list('version' = 'v31.0 (March 2017)')
uniprot <- list('version' = 'release 2017_03')
pfam <- list('version' = 'v31.0 (March 2017)')
uniprot <- list('version' = 'release 2017_03')
database_versions <- list('pfam' = pfam, 'uniprot' = uniprot)
database_versions$pfam$version
?install.packages
help(install)
library(pcgrr2)
help(install.packages)
help("install")
library(devtools)
help(install)
setwd('/Users/sigven/research/docker/pcgr/examples')
suppressWarnings(suppressPackageStartupMessages(library(pcgrr2)))
suppressWarnings(suppressPackageStartupMessages(library(magrittr)))
suppressWarnings(suppressPackageStartupMessages(library(BSgenome.Hsapiens.UCSC.hg19)))
suppressWarnings(suppressPackageStartupMessages(library(deconstructSigs)))
project_directory <- getwd()
query_vcf <- 'TCGA-A6-2686-01A-01D-1408-10_TCGA-A6-2686-10A-01D-2188-10.pcgr.vcf.gz'
sample_name <- 'TCGA-A6-2686-01A-01D-1408-10_TCGA-A6-2686-10A-01D-2188-10'
load('../data/rda/pcgr_data.rda')
sample_calls <- pcgrr2::get_calls(query_vcf, sample_id = sample_name)
sort(colnames(sample_calls))
minimum_n_signature_analysis <- 50
signatures_limit <- 6
tier1_report <- FALSE
tier2_report <- FALSE
tier3_report <- FALSE
tier4_report <- FALSE
tier5_report <- FALSE
clinical_evidence_items_tier1A <- data.frame()
clinical_evidence_items_tier1B <- data.frame()
clinical_evidence_items_tier1C <- data.frame()
variants_tier1_display <- data.frame()
variants_tier2_display <- data.frame()
variants_tier3_display <- data.frame()
variants_tier4_display <- data.frame()
variants_tier5_display <- data.frame()
signature_report <- FALSE
missing_signature_data <- FALSE
signature_call_set <- data.frame()
sample_calls_coding <- sample_calls %>% dplyr::filter(stringr::str_detect(CONSEQUENCE,"stop_gained|stop_lost|start_lost|frameshift_variant|missense_variant|splice_donor|splice_acceptor|inframe_deletion|inframe_insertion"))
rlogging::message(paste0("Number of coding variants: ",nrow(sample_calls_coding)))
sample_calls_noncoding <- sample_calls %>% dplyr::filter(!stringr::str_detect(CONSEQUENCE,"stop_gained|stop_lost|start_lost|frameshift_variant|missense_variant|splice_donor|splice_acceptor|inframe_deletion|inframe_insertion"))
rlogging::message(paste0("Number of noncoding variants: ",nrow(sample_calls_noncoding)))
#sample_stats_plot_all <- OncoVarReporter::plot_call_statistics(sample_calls,"Somatic calls - all")
#sample_stats_plot_coding <- OncoVarReporter::plot_call_statistics(sample_calls_coding,"Somatic calls - coding")
min_variants_for_signature <- minimum_n_signature_analysis
signature_data <- NULL
tsv_variants <- NULL
tsv_biomarkers <- NULL
if(any(grepl(paste0("VARIANT_CLASS$"),names(sample_calls)))){
if(nrow(sample_calls[sample_calls$VARIANT_CLASS == 'SNV',]) >= min_variants_for_signature){
signature_call_set <- sample_calls[sample_calls$VARIANT_CLASS == 'SNV',]
signature_call_set <- dplyr::filter(signature_call_set, CHROM != 'MT')
signature_call_set$VCF_SAMPLE_ID <- sample_name
signature_report <- TRUE
mut_signature_contributions <- pcgrr2::signature_contributions_single_sample(signature_call_set, sample_name = sample_name, signatures_limit = signatures_limit)
signature_columns <- as.numeric(stringr::str_replace(as.character(mut_signature_contributions$which_signatures_df[mut_signature_contributions$which_signatures_df$signature_id != 'unknown',]$signature_id),"S",""))
weight_df <- data.frame('Signature_ID' = as.character(mut_signature_contributions$which_signatures_df$signature_id), 'Weight' = round(as.numeric(mut_signature_contributions$which_signatures_df$weight),digits=3), stringsAsFactors = F)
cancertypes_aetiologies <- pcgr_data$signatures_aetiologies[signature_columns,]
signatures_cancertypes_aetiologies <- dplyr::left_join(cancertypes_aetiologies,weight_df,by=c("Signature_ID")) %>% dplyr::arrange(desc(Weight))
signatures_cancertypes_aetiologies <- signatures_cancertypes_aetiologies[,c("Signature_ID","Weight","Cancer_types","Proposed_aetiology","Comments")]
signature_data <- list('signature_call_set' = signature_call_set, 'mut_signature_contributions' = mut_signature_contributions, 'signatures_cancertypes_aetiologies' = signatures_cancertypes_aetiologies)
}
else{
if(nrow(sample_calls[sample_calls$VARIANT_CLASS == 'SNV',]) > 0){
signature_call_set <- sample_calls[sample_calls$VARIANT_CLASS == 'SNV',]
signature_call_set <- dplyr::filter(signature_call_set, CHROM != 'MT')
}
rlogging::message(paste0("Too few variants (n = ",nrow(signature_call_set),") for reconstruction of mutational signatures by deconstructSigs"))
missing_signature_data <- TRUE
signature_data <- list('signature_call_set' = signature_call_set)
}
}
vcf_data_df <- sample_calls_coding
mapping <- 'exact'
variant_origin <- 'Somatic Mutation'
if("pubmed_html_link" %in% colnames(pcgr_data$civic_biomarkers)){
pcgr_data$civic_biomarkers <- dplyr::rename(pcgr_data$civic_biomarkers, citation = pubmed_html_link)
}
if("evidence_description" %in% colnames(pcgr_data$civic_biomarkers)){
pcgr_data$civic_biomarkers <- dplyr::rename(pcgr_data$civic_biomarkers, description = evidence_description)
}
if("pubmed_html_link" %in% colnames(pcgr_data$cbmdb_biomarkers)){
pcgr_data$cbmdb_biomarkers <- dplyr::rename(pcgr_data$cbmdb_biomarkers, citation = pubmed_html_link)
}
if("evidence_description" %in% colnames(pcgr_data$cbmdb_biomarkers)){
pcgr_data$cbmdb_biomarkers <- dplyr::rename(pcgr_data$cbmdb_biomarkers, description = evidence_description)
}
clinical_evidence_items <- data.frame()
biomarker_descriptions <- data.frame()
pcgr_data$cbmdb_biomarkers <- dplyr::filter(pcgr_data$cbmdb_biomarkers, is.na(variant_origin) | variant_origin == variant_origin)
pcgr_data$civic_biomarkers <- dplyr::filter(pcgr_data$civic_biomarkers, is.na(variant_origin) | variant_origin == variant_origin)
vcf_data_df_civic <- vcf_data_df %>% dplyr::filter(!is.na(CIVIC_ID))
if(nrow(vcf_data_df_civic) > 0){
tmp <- dplyr::select(vcf_data_df_civic,CIVIC_ID,VAR_ID)
tmp <- tmp %>% tidyr::separate_rows(CIVIC_ID,sep=",")
vcf_data_df_civic <- merge(tmp,dplyr::select(vcf_data_df_civic,-c(CIVIC_ID)),by.x = "VAR_ID",by.y = "VAR_ID")
civic_calls <- dplyr::select(vcf_data_df_civic,dplyr::one_of(pcgr_data$pcgr_all_annotation_columns))
eitems <- NULL
if(any(stringr::str_detect(civic_calls$CIVIC_ID,"EID"))){
eitems <- dplyr::left_join(civic_calls,dplyr::filter(dplyr::select(pcgr_data$civic_biomarkers,-c(civic_exon,civic_consequence,civic_codon,transvar_id,civic_id)),alteration_type == 'MUT'),by=c("CIVIC_ID" = "evidence_id"))
}
else{
eitems <- dplyr::left_join(civic_calls,dplyr::filter(dplyr::select(pcgr_data$civic_biomarkers,-c(civic_exon,civic_consequence,civic_codon,transvar_id)),alteration_type == 'MUT'),by=c("CIVIC_ID" = "civic_id"))
}
names(eitems) <- toupper(names(eitems))
eitems$BIOMARKER_MAPPING <- 'exact'
bm_descriptions <- data.frame('description' = eitems$BIOMARKER_DESCRIPTION)
biomarker_descriptions <- rbind(biomarker_descriptions, bm_descriptions)
clinical_evidence_items <- rbind(clinical_evidence_items, eitems)
}
clinical_evidence_items
vcf_data_df_cbmdb <- vcf_data_df %>% dplyr::filter(is.na(CIVIC_ID) & !is.na(CBMDB_ID))
vcf_data_df_cbmdb
colnames(clinical_evidence_items)
pcgr_all_annotation_columns_reduced <- pcgr_data$pcgr_all_annotation_columns[-which(pcgr_data$pcgr_all_annotation_columns == 'EXON' | pcgr_data$pcgr_all_annotation_columns == 'CIVIC_ID' | pcgr_data$pcgr_all_annotation_columns == 'CIVIC_ID_2' | pcgr_data$pcgr_all_annotation_columns == 'CBMDB_ID')]
pcgr_all_annotation_columns_reduced
all_tier1_tags <- c(pcgr_data$pcgr_all_annotation_columns_reduced,c("CLINICAL_SIGNIFICANCE","EVIDENCE_LEVEL","EVIDENCE_TYPE","EVIDENCE_DIRECTION","DISEASE_NAME","DESCRIPTION","CITATION","DRUG_NAMES","RATING"))
clinical_evidence_items <- dplyr::select(clinical_evidence_items, dplyr::one_of(all_tier1_tags))
unique_variants <- clinical_evidence_items %>% dplyr::select(SYMBOL,CONSEQUENCE,PROTEIN_CHANGE,CDS_CHANGE) %>% dplyr::distinct()
clinical_evidence_items
all_tier1_tags
pcgr_all_annotation_columns_reduced <- pcgr_data$pcgr_all_annotation_columns[-which(pcgr_data$pcgr_all_annotation_columns == 'EXON' | pcgr_data$pcgr_all_annotation_columns == 'CIVIC_ID' | pcgr_data$pcgr_all_annotation_columns == 'CIVIC_ID_2' | pcgr_data$pcgr_all_annotation_columns == 'CBMDB_ID')]
pcgr_all_annotation_columns_reduced
all_tier1_tags <- c(pcgr_all_annotation_columns_reduced,c("CLINICAL_SIGNIFICANCE","EVIDENCE_LEVEL","EVIDENCE_TYPE","EVIDENCE_DIRECTION","DISEASE_NAME","DESCRIPTION","CITATION","DRUG_NAMES","RATING"))
all_tier1_tags
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
report_data <- pcgrr2::generate_report_data(sample_calls, sample_name = sample_name, minimum_n_signature_analysis = 50, signatures_limit = signatures_limit)
pcgrr2::generate_pcg_report(project_directory = getwd(), query_vcf = 'TCGA-A6-2686-01A-01D-1408-10_TCGA-A6-2686-10A-01D-2188-10.pcgr.vcf.gz' sample_name = sample_name, signatures_limit = 6)
pcgrr2::generate_pcg_report(project_directory = getwd(), query_vcf = 'TCGA-A6-2686-01A-01D-1408-10_TCGA-A6-2686-10A-01D-2188-10.pcgr.vcf.gz', sample_name = sample_name, signatures_limit = 6)
library(dplyr)
help(left_join)
vcf_gz_file <- '../../../examples/tumor_sample.BRCA.vcf.gz'
library(BSgenome.Hsapiens.UCSC.hg19)
library(magrittr)
library(deconstructSigs)
library(data.table)
library(ggplot2)
library(rlogging)
rlogging::message(paste0("Reading and parsing VEP/vcfanno-annotated VCF file - ",vcf_gz_file))
vcf_data_vr <- VariantAnnotation::readVcfAsVRanges(vcf_gz_file,genome = "hg19")
vcf_data_vr <- vcf_data_vr[!is.na(vcf_data_vr$GT) & !(vcf_data_vr$GT == '.'),]
vcf_data_vr <- pcgrr2::postprocess_vranges_info(vcf_data_vr)
vcf_data_df <- as.data.frame(vcf_data_vr)
vcf_data_df$GENOME_VERSION <- 'GRCh37'
vcf_data_df <- dplyr::rename(vcf_data_df, CHROM = seqnames, POS = start, REF = ref, ALT = alt, CONSEQUENCE = Consequence, PROTEIN_CHANGE = HGVSp_short)
vcf_data_df$GENOMIC_CHANGE <- paste(paste(paste(paste0("g.chr",vcf_data_df$CHROM),vcf_data_df$POS,sep=":"),vcf_data_df$REF,sep=":"),vcf_data_df$ALT,sep=">")
vcf_data_df <- pcgrr2::add_pfam_domain_links(vcf_data_df)
vcf_data_df <- pcgrr2::add_swissprot_feature_descriptions(vcf_data_df)
vcf_data_df <- pcgrr2::add_read_support(vcf_data_df)
rlogging::message("Extending annotation descriptions related to Database of Curated Mutations (DoCM)")
vcf_data_df <- dplyr::left_join(vcf_data_df, pcgr_data$docm_literature, by=c("VAR_ID"))
gencode_xref <- dplyr::rename(pcgr_data$gene_xref, Gene = ensembl_gene_id, GENENAME = name, ENTREZ_ID = entrezgene)
gencode_xref <- gencode_xref %>% dplyr::filter(!is.na(Gene)) %>% dplyr::select(Gene,GENENAME,ENTREZ_ID) %>% dplyr::distinct()
gencode_xref$GENENAME <- stringr::str_replace(gencode_xref$GENENAME," \\[.{1,}$","")
gencode_xref$ENTREZ_ID <- as.character(gencode_xref$ENTREZ_ID)
gencode_xref <- dplyr::filter(gencode_xref, !is.na(GENENAME) & !is.na(ENTREZ_ID))
load('../../../data/rda/pcgr_data.rda')
vcf_data_df$GENOME_VERSION <- 'GRCh37'
vcf_data_df <- dplyr::rename(vcf_data_df, CHROM = seqnames, POS = start, REF = ref, ALT = alt, CONSEQUENCE = Consequence, PROTEIN_CHANGE = HGVSp_short)
vcf_data_df$GENOMIC_CHANGE <- paste(paste(paste(paste0("g.chr",vcf_data_df$CHROM),vcf_data_df$POS,sep=":"),vcf_data_df$REF,sep=":"),vcf_data_df$ALT,sep=">")
vcf_data_df <- pcgrr2::add_pfam_domain_links(vcf_data_df)
vcf_data_df <- pcgrr2::add_swissprot_feature_descriptions(vcf_data_df)
vcf_data_df <- pcgrr2::add_read_support(vcf_data_df)
rlogging::message("Extending annotation descriptions related to Database of Curated Mutations (DoCM)")
vcf_data_df <- dplyr::left_join(vcf_data_df, pcgr_data$docm_literature, by=c("VAR_ID"))
gencode_xref <- dplyr::rename(pcgr_data$gene_xref, Gene = ensembl_gene_id, GENENAME = name, ENTREZ_ID = entrezgene)
gencode_xref <- gencode_xref %>% dplyr::filter(!is.na(Gene)) %>% dplyr::select(Gene,GENENAME,ENTREZ_ID) %>% dplyr::distinct()
gencode_xref$GENENAME <- stringr::str_replace(gencode_xref$GENENAME," \\[.{1,}$","")
gencode_xref$ENTREZ_ID <- as.character(gencode_xref$ENTREZ_ID)
gencode_xref <- dplyr::filter(gencode_xref, !is.na(GENENAME) & !is.na(ENTREZ_ID))
dplyr::filter(gencode_xref, ENTREZ_ID == '79465')
str(gencode_xref)
str(pcgr_data$kegg_gene_pathway_links)
dplyr::filter(pcgr_data$kegg_gene_pathway_links, gene_id == '79465')
nrow(pcgr_data$kegg_gene_pathway_links)
project_directory <- '/Users/sigven/research/docker/pcgr/examples'
query_vcf <- 'tumor_sample.COAD.vcf.gz'
library(pcgrr2)
setwd(project_directory)
vcf_gz_file <- 'EMN-3661-G1_EMN-3661-T2_MuTect_SNVs.vcf.gz'
vcf_data_vr <- VariantAnnotation::readVcfAsVRanges(vcf_gz_file,genome = "hg19")
head(vcf_data_vr)
geno(vcf_data_vr)
library(VariantAnnotation)
geno(vcf_data_vr)
vcf_data_vr
mcols(vcf_data_vr)
info(vcf_data_vr)
help(VRanges)
softFilterMatrix(vcf_data_vr)
head(softFilterMatrix(vcf_data_vr))
names(softFilterMatrix(vcf_data_vr))
colnames(softFilterMatrix(vcf_data_vr))
head(vcf_data_vr)
vcf_data_vr[1463294,]
vcf_data_vr[1463294]
ranges(vcf_data_vr)
ranges(vcf_data_vr)[vcf_data_vr[1463294]]
ranges(vcf_data_vr)[1463294]
unique(softFilterMatrix(vcf_data_vr))
vcf_gz_file <- 'EMN-3661-G1_EMN-3661-T2.strelka.snv.vcf.gz'
vcf_data_vr <- VariantAnnotation::readVcfAsVRanges(vcf_gz_file,genome = "hg19")
unique(softFilterMatrix(vcf_data_vr))
vcf_data_vr <- VariantAnnotation::readVcf(vcf_gz_file,genome = "hg19")
head(vcf_data_vr)
rowranges(vcf_data_vr)
vcf_data_vr$`1:1431051_G/T
``
`
`
''
`
`
`
vcf_data_vr <- VariantAnnotation::readVcfAsVRanges(vcf_gz_file,genome = "hg19")
head(vcf_data_vr)
length(vcf_data_vr)
length(softFilterMatrix)
length(softFilterMatrix(vcf_data_vr))
unique(softFilterMatrix(vcf_data_vr))
mcols(vcf_data_vranges)
library(GenomicRanges)
mcols(vcf_data_vranges)
GenomicRanges::mcols(vcf_data_vranges)
GenomicRanges::mcols(vcf_data_vr)
help("readVcfAsVRanges")
called(vcf_data_vr)
head(vcf_data_vr, 30)
head(called(vcf_data_vr),20)
vcf_data_vr <- vcf_data_vr[called(vcf_data_vr)]
length(vcf_data_vr)
vcf_gz_file <- 'tumor_sample.BRCA.vcf.gz'
vcf_data_vr <- VariantAnnotation::readVcfAsVRanges(vcf_gz_file,genome = "hg19")
length(vcf_data_vr)
vcf_data_vr <- vcf_data_vr[called(vcf_data_vr)]
length(vcf_data_vr)
help(called)
VRanges::called
library(VRanges)
library(pcgrr2)
library(rlogging)
knit_with_parameters('~/research/test_md.Rmd')
help(as.numeric)
tmp <- c(-1.234,NA)
tmp
tmp <- as.numeric(tmp)
tmp
cna_file <- '/Users/sigven/research/docker/pcgr/examples/test.cna.tsv'
logR_threshold_amplification <- 0.8
logR_threshold_homozygous_deletion <- -0.8
cna_df <- read.table(file=cna_file,header = T,stringsAsFactors = F,comment.char="", quote="")
cna_df <- dplyr::rename(cna_df, chromosome = Chromosome, LogR = Segment_Mean, segment_start = Start, segment_end = End) %>% dplyr::distinct()
library(magrittr)
cna_df <- dplyr::rename(cna_df, chromosome = Chromosome, LogR = Segment_Mean, segment_start = Start, segment_end = End) %>% dplyr::distinct()
cna_df <- cna_df %>% dplyr::filter(!is.na(LogR))
cna_df$LogR <- as.numeric(cna_df$LogR)
str(cna_df)
load('/Users/sigven/research/docker/pcgr/data/rda/pcgr_data.rda')
cna_gr <- GenomicRanges::makeGRangesFromDataFrame(cna_df, keep.extra.columns = T, seqinfo = pcgr_data$seqinfo_hg19, seqnames.field = 'chromosome',start.field = 'segment_start', end.field = 'segment_end', ignore.strand = T, starts.in.df.are.0based = T)
hits <- GenomicRanges::findOverlaps(cna_gr, pcgr_data$ensembl_genes_gr, type="any", select="all")
ranges <- pcgr_data$ensembl_genes_gr[subjectHits(hits)]
mcols(ranges) <- c(mcols(ranges),mcols(cna_gr[queryHits(hits)]))
library(GenomicRanges)
cna_gr <- GenomicRanges::makeGRangesFromDataFrame(cna_df, keep.extra.columns = T, seqinfo = pcgr_data$seqinfo_hg19, seqnames.field = 'chromosome',start.field = 'segment_start', end.field = 'segment_end', ignore.strand = T, starts.in.df.are.0based = T)
hits <- GenomicRanges::findOverlaps(cna_gr, pcgr_data$ensembl_genes_gr, type="any", select="all")
ranges <- pcgr_data$ensembl_genes_gr[subjectHits(hits)]
mcols(ranges) <- c(mcols(ranges),mcols(cna_gr[queryHits(hits)]))
help("subjectHits")
df <- as.data.frame(mcols(ranges))
df$segment_start <- start(ranges(cna_gr[queryHits(hits)]))
df$segment_end <- end(ranges(cna_gr[queryHits(hits)]))
df$segment_length <- paste(round((as.numeric((df$segment_end - df$segment_start)/1000000)),digits = 3),"Mb")
df$transcript_start <- start(ranges)
df$transcript_end <- end(ranges)
df$chrom <- as.character(seqnames(ranges))
df <- as.data.frame(df %>% dplyr::rowwise() %>% dplyr::mutate(transcript_overlap_percent = round(as.numeric((min(transcript_end,segment_end) - max(segment_start,transcript_start)) / (transcript_end - transcript_start)) * 100, digits = 2)))
df$segment_link <- paste0("<a href='",paste0('http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg19&position=',paste0(df$chrom,':',df$segment_start,'-',df$segment_end)),"' target=\"_blank\">",paste0(df$chrom,':',df$segment_start,'-',df$segment_end),"</a>")
df_print <- df
df_print <- dplyr::select(df_print,chrom,segment_start,segment_end,segment_length,LogR,ensembl_gene_id,symbol,ensembl_transcript_id,transcript_start,transcript_end,transcript_overlap_percent,name,gene_biotype,cancer_census_germline,cancer_census_somatic,tsgene,ts_oncogene,intogen_drivers,antineoplastic_drugs_dgidb,gencode_transcript_type,gencode_tag,gencode_v19)
chrOrder <- c(as.character(paste0('chr',c(1:22))),"chrX","chrY")
df_print$chrom <- factor(df_print$chrom, levels=chrOrder)
df_print <- df_print[order(df_print$chrom),]
df_print$segment_start <- as.integer(df_print$segment_start)
df_print$segment_end <- as.integer(df_print$segment_end)
df_print_sorted <- NULL
for(chrom in chrOrder){
if(nrow(df_print[df_print$chrom == chrom,]) > 0){
chrom_regions <- df_print[df_print$chrom == chrom,]
chrom_regions_sorted <- chrom_regions[with(chrom_regions, order(segment_start, segment_end)),]
df_print_sorted <- rbind(df_print_sorted, chrom_regions_sorted)
}
}
df_print_sorted$cancer_census_somatic <- stringr::str_replace_all(df_print_sorted$cancer_census_somatic,"&",", ")
df_print_sorted$cancer_census_germline <- stringr::str_replace_all(df_print_sorted$cancer_census_germline,"&",", ")
df_print_sorted$antineoplastic_drugs_dgidb <- stringr::str_replace_all(df_print_sorted$antineoplastic_drugs_dgidb,"&",", ")
df <- dplyr::select(df, -ensembl_transcript_id) %>% dplyr::filter(gene_biotype == 'protein_coding') %>% dplyr::distinct()
df$cancer_census_somatic <- stringr::str_replace_all(df$cancer_census_somatic,"&",", ")
df <- dplyr::rename(df, ANTINEOPLASTIC_DRUG_INTERACTION = antineoplastic_drugs_dgidb)
df$VAR_ID <- rep(1:nrow(df))
df <- pcgrr2::annotate_variant_link(df, vardb = 'DGIDB')
df <- dplyr::rename(df, ONCOGENE = ts_oncogene, TUMOR_SUPPRESSOR = tsgene, ENTREZ_ID = entrezgene, CANCER_CENSUS_SOMATIC = cancer_census_somatic, GENE = symbol, CHROMOSOME = chrom, GENENAME = name, ANTINEOPLASTIC_DRUG_INTERACTIONS = DGIDBLINK, SEGMENT_LENGTH = segment_length, SEGMENT = segment_link, TRANSCRIPT_OVERLAP = transcript_overlap_percent)
df$ENTREZ_ID <- as.character(df$ENTREZ_ID)
df <- dplyr::left_join(df,pcgr_data$kegg_gene_pathway_links, by=c("ENTREZ_ID" = "gene_id"))
df <- dplyr::rename(df, KEGG_PATHWAY = kegg_pathway_urls)
df <- pcgrr2::annotate_variant_link(df, vardb = 'NCBI_GENE')
df <- dplyr::rename(df, GENE_NAME = NCBI_GENE_LINK)
df <- dplyr::select(df, CHROMOSOME, GENE, GENE_NAME, CANCER_CENSUS_SOMATIC, KEGG_PATHWAY, TUMOR_SUPPRESSOR, ONCOGENE, ANTINEOPLASTIC_DRUG_INTERACTIONS,SEGMENT_LENGTH, SEGMENT, gencode_transcript_type,LogR, TRANSCRIPT_OVERLAP) %>% dplyr::distinct()
df <- df %>% dplyr::distinct()
segments <- NULL
segments <- dplyr::select(df, SEGMENT, SEGMENT_LENGTH, LogR) %>% dplyr::distinct()
df$SEGMENT
load('/Users/sigven/research/docker/pcgr/data/rda/pcgr_data.rda')
logR_threshold_homozygous_deletion <- -0.8
logR_threshold_amplification <- 0.8
cna_file <- '/Users/sigven/research/docker/pcgr/examples/test.cna.tsv'
cna_df <- read.table(file=cna_file,header = T,stringsAsFactors = F,comment.char="", quote="")
cna_df <- dplyr::rename(cna_df, chromosome = Chromosome, LogR = Segment_Mean, segment_start = Start, segment_end = End) %>% dplyr::distinct()
if(!any(stringr::str_detect(cna_df$chromosome,"chr"))){
cna_df$chromosome <- paste0("chr",cna_df$chromosome)
}
cna_df <- cna_df %>% dplyr::filter(!is.na(LogR))
cna_df$LogR <- as.numeric(cna_df$LogR)
cna_gr <- GenomicRanges::makeGRangesFromDataFrame(cna_df, keep.extra.columns = T, seqinfo = pcgr_data$seqinfo_hg19, seqnames.field = 'chromosome',start.field = 'segment_start', end.field = 'segment_end', ignore.strand = T, starts.in.df.are.0based = T)
hits <- GenomicRanges::findOverlaps(cna_gr, pcgr_data$ensembl_genes_gr, type="any", select="all")
ranges <- pcgr_data$ensembl_genes_gr[subjectHits(hits)]
mcols(ranges) <- c(mcols(ranges),mcols(cna_gr[queryHits(hits)]))
df <- as.data.frame(mcols(ranges))
df$segment_start <- start(ranges(cna_gr[queryHits(hits)]))
df$segment_end <- end(ranges(cna_gr[queryHits(hits)]))
df$segment_length <- paste(round((as.numeric((df$segment_end - df$segment_start)/1000000)),digits = 3),"Mb")
head(df)
dplyr::select(df, segment_start, segment_end,LogR) %>% dplyr::distinct() %>% nrow()
head(cna_gr)
cna_df <- read.table(file=cna_file,header = T,stringsAsFactors = F,comment.char="", quote="")
cna_df <- dplyr::rename(cna_df, chromosome = Chromosome, LogR = Segment_Mean, segment_start = Start, segment_end = End) %>% dplyr::distinct()
if(!any(stringr::str_detect(cna_df$chromosome,"chr"))){
cna_df$chromosome <- paste0("chr",cna_df$chromosome)
}
cna_df <- cna_df %>% dplyr::filter(!is.na(LogR))
cna_df$LogR <- as.numeric(cna_df$LogR)
cna_segments <- cna_df
cna_segments$segment_link <- paste0("<a href='",paste0('http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg19&position=',paste0(cna_segments$chromosome,':',cna_segments$segment_start,'-',cna_segments$segment_end)),"' target=\"_blank\">",paste0(cna_segments$chromosome,':',cna_segments$segment_start,'-',cna_segments$segment_end),"</a>")
cna_segments$segment_length <- paste(round((as.numeric((cna_segments$segment_end - cna_segments$segment_start)/1000000)),digits = 3),"Mb")
cna_segments <- dplyr::rename(cna_segments, SEGMENT_LENGTH = segment_length, SEGMENT = segment_link)
cna_segments <- dplyr::select(cna_segments, SEGMENT, SEGMENT_LENGTH, LogR) %>% dplyr::distinct()
cna_segments_filtered <- dplyr::filter(segments, LogR >= logR_threshold_amplification | LogR <= logR_threshold_homozygous_deletion)
cna_segments_filtered <- cna_segments_filtered %>% dplyr::arrange(desc(LogR))
rlogging::message(paste0("Detected ",nrow(cna_segments_filtered)," segments subject to amplification/deletion"))
cna_segments_filtered <- dplyr::filter(cna_segments, LogR >= logR_threshold_amplification | LogR <= logR_threshold_homozygous_deletion)
cna_segments_filtered <- cna_segments_filtered %>% dplyr::arrange(desc(LogR))
rlogging::message(paste0("Detected ",nrow(cna_segments_filtered)," segments subject to amplification/deletion"))
getwd()
project_directory <- '/Users/sigven/research/docker/pcgr/examples'
query_vcf <- 'tumor_sample.COAD.pcgr.vcf.gz'
sample_name <- 'test_pcgrr2'
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
query_vcf <- paste0(getwd(),"/",tumor_sample.COAD.pcgr.vcf.gz)
query_vcf <- paste0(getwd(),"/",'tumor_sample.COAD.pcgr.vcf.gz')
query_vcf
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
query_vcf <- paste0(project_directory,"/",'tumor_sample.COAD.pcgr.vcf.gz')
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
library(deconstructSigs)
suppressWarnings(suppressPackageStartupMessages(library(magrittr)))
suppressWarnings(suppressPackageStartupMessages(library(BSgenome.Hsapiens.UCSC.hg19)))
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgr_data$tier2_tags_display
pcgr_data$tier2_tags_display
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
help(formatStyle)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
query_vcf <- '/Users/sigven/research/docker/examples/tumor_sample.BRCA.pcgr.vcf.gz'
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
query_vcf <- '/Users/sigven/research/docker/pcgr/examples/tumor_sample.BRCA.pcgr.vcf.gz'
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8)
cna_segments_tsv <- '/Users/sigven/research/docker/pcgr/examples/tumor_sample.BRCA.cna.tsv'
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8, cna_segments_tsv = cna_segments_tsv)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8, cna_segments_tsv = cna_segments_tsv)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8, cna_segments_tsv = cna_segments_tsv)
pcgrr2::generate_pcg_report(project_directory = project_directory, query_vcf = query_vcf, logR_threshold_amplification = 0.8, logR_threshold_homozygous_deletion = -0.8, cna_segments_tsv = cna_segments_tsv)
