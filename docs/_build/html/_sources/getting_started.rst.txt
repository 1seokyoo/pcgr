Getting started
---------------

Prerequisites
~~~~~~~~~~~~~

Installation of Docker
^^^^^^^^^^^^^^^^^^^^^^

-  Running PCGR requires that Docker is set up on your host. Docker has
   very complete installation instructions for different platforms:

   -  installing `Docker on
      Linux <https://docs.docker.com/engine/installation/linux/>`__
   -  installing `Docker on Mac
      OS <https://docs.docker.com/engine/installation/mac/>`__
   -  NOTE: We have not yet been able to perform enough testing on the
      Windows platform, and we have received feedback that particular
      versions of Docker/Windows do not work with PCGR (an example being
      `mounting of data
      volumes <https://github.com/docker/toolbox/issues/607>`__)

-  Check that Docker is running, e.g by typing ``docker ps`` or
   ``docker images`` in your terminal window

-  **IMPORTANT**: The following represent the *minimal* computing
   resources that must be assigned to the Docker virtual machine:

   -  Memory: 5GB
   -  CPUs: 4

   For Docker version 1.13 on `Mac OS
   X <https://docs.docker.com/docker-for-mac/#advanced>`__ there is an
   option to change CPU's and RAM from the UI and restart Docker. This
   can be found through `Docker Preferences
   (Advanced) <https://docs.docker.com/docker-for-windows/#advanced>`__
   in the toolbar. Similarly for `Docker for
   Windows <https://docs.docker.com/docker-for-windows/#advanced>`__.

Python
^^^^^^

An installation of Python (version 2.7.13) is required to run PCGR.
Check that Python is installed by typing ``python --version`` in your
terminal window. In addition, a `Python
library <https://github.com/uiri/toml>`__ for parsing configuration
files encoded with `TOML <https://github.com/toml-lang/toml>`__ is
needed. To install, simply run the following command:

::

    pip install toml

Download PCGR
^^^^^^^^^^^^^

-  Download and unpack the `latest software release
   (0.5.3) <https://github.com/sigven/pcgr/releases/latest>`__

-  Download and unpack the data bundle (approx. 16Gb) in the PCGR
   directory

   -  Download `the accompanying data
      bundle <https://drive.google.com/file/d/1NSeMWpLVMBcCEDYpOLsuWSnKfZEaamip/>`__
      from Google Drive to ``~/pcgr-X.X`` (replace *X.X* with the
      version number, e.g. ``~/pcgr-0.5.3``)
   -  Decompress and untar the bundle, e.g. through the following Unix
      command:
      ``gzip -dc pcgr.databundle.GRCh37.YYYYMMDD.tgz | tar xvf -``

   A *data/* folder within the *pcgr-X.X* software folder should now
   have been produced

-  Pull the `PCGR Docker image -
   0.5.3 <https://hub.docker.com/r/sigven/pcgr/>`__ from DockerHub
   (approx 4.2Gb) :

   -  ``docker pull sigven/pcgr:0.5.3`` (PCGR annotation engine)

Run test - generation of clinical report for a cancer genome
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A tumor sample report is generated by calling the Python script
**pcgr.py**, which takes the following arguments and options:

::

    usage: pcgr.py [-h] [--input_vcf INPUT_VCF] [--input_cna INPUT_CNA]
             [--force_overwrite] [--version]
             pcgr_dir output_dir configuration_file sample_id

    Personal Cancer Genome Reporter (PCGR) workflow for clinical interpretation of
    somatic nucleotide variants and copy number aberration segments

    positional arguments:
    pcgr_dir              PCGR base directory with accompanying data directory,
                    e.g. ~/pcgr-0.5.3
    output_dir            Output directory
    configuration_file    PCGR configuration file (TOML format)
    sample_id             Tumor sample/cancer genome identifier - prefix for
                    output files

    optional arguments:
    -h, --help            show this help message and exit
    --input_vcf INPUT_VCF
                    VCF input file with somatic query variants
                    (SNVs/InDels). Note: GRCh37 is currently the only
                    reference genome build supported (default: None)
    --input_cna INPUT_CNA
                    Somatic copy number alteration segments (tab-separated
                    values) (default: None)
    --force_overwrite     By default, the script will fail with an error if any
                    output file already exists. You can force the
                    overwrite of existing result files by using this flag
                    (default: False)
    --version             show program's version number and exit

The configuration file, formatted using
`TOML <https://github.com/toml-lang/toml>`__ (an easy to read file
format) enables the user to configure a number of options in the PCGR
workflow, related to the following:

-  MSI prediction
-  Mutational signatures analysis
-  Coding target size - for mutational burden analysis
-  Tumor-only analysis options (i.e. exclusion of germline
   variants/enrichment for somatic calls)
-  VEP/vcfanno options
-  Specification of INFO tags in VCF that denote sequencing
   depth/allelic support of variants
-  Log-ratio thresholds for gains/losses in CNA analysis

The *examples* folder contain input files from two tumor samples
sequenced within TCGA. It also contains a PCGR configuration file. A
report for a colorectal tumor case can be generated by running the
following command in your terminal window:

``python pcgr.py --input_vcf ~/pcgr-0.5.3/examples/tumor_sample.COAD.vcf.gz``
``--input_cna ~/pcgr-0.5.3/examples/tumor_sample.COAD.cna.tsv``
``~/pcgr-0.5.3 ~/pcgr-0.5.3/examples``
\`\ ``~/pcgr-0.5.3/examples/pcgr_configuration_examples.toml tumor_sample.COAD``

This command will run the Docker-based PCGR workflow and produce the
following output files in the *examples* folder:

1. **tumor\_sample.COAD.pcgr.html** - An interactive HTML report for
   clinical interpretation
2. **tumor\_sample.COAD.pcgr.vcf.gz** - VCF file with rich set of
   annotations for precision oncology
3. **tumor\_sample.COAD.pcgr.maf** - A basic MAF file for use as input
   in downstream analyses with other tools (e.g.
   `2020plus <https://github.com/KarchinLab/2020plus>`__, MutSigCV)
4. **tumor\_sample.COAD.pcgr.snvs\_indels.tiers.tsv** - Tab-separated
   values file with variants organized according to tiers of functional
   relevance
5. **tumor\_sample.COAD.pcgr.mutational\_signatures.tsv** -
   Tab-separated values file with estimated contributions by known
   mutational signatures and associated underlying etiologies
6. **tumor\_sample.COAD.pcgr.snvs\_indels.biomarkers.tsv** -
   Tab-separated values file with clinical evidence items associated
   with biomarkers for diagnosis, prognosis or drug
   sensitivity/resistance
7. **tumor\_sample.COAD.pcgr.cna\_segments.tsv.gz** - Tab-separated
   values file with annotations of gene transcripts that overlap with
   somatic copy number aberrations
