Getting started
---------------

Prerequisites
~~~~~~~~~~~~~

Installation of Docker
^^^^^^^^^^^^^^^^^^^^^^

-  Running PCGR requires that Docker is set up on your host. Docker has
   very complete installation instructions for different platforms:

   -  installing `Docker on
      Linux <https://docs.docker.com/engine/installation/linux/>`__
   -  installing `Docker on Mac
      OS <https://docs.docker.com/engine/installation/mac/>`__

-  Check that Docker is running, e.g by typing ``docker ps`` or
   ``docker images`` in your terminal window

-  **IMPORTANT**: The following represent the *minimal* computing
   resources that must be assigned to the Docker virtual machine:

   -  Memory: 5GB
   -  CPUs: 4

   For Docker version 1.13 on `Mac OS
   X <https://docs.docker.com/docker-for-mac/#advanced>`__ there is an
   option to change CPU's and RAM from the UI and restart Docker. This
   can be found through `Docker Preferences
   (Advanced) <https://docs.docker.com/docker-for-windows/#advanced>`__
   in the toolbar. Similarly for `Docker for
   Windows <https://docs.docker.com/docker-for-windows/#advanced>`__.

Python
^^^^^^

An installation of Python (version 2.7.13) is required to run PCGR.
Check that Python is installed by typing ``python --version`` in your
terminal window.

Download PCGR
^^^^^^^^^^^^^

-  Download and unpack the `latest
   release <https://github.com/sigven/pcgr/releases/latest>`__

-  Download and unpack the data bundle (approx. 17Gb) in the PCGR
   directory

   -  Download `the latest data
      bundle <https://drive.google.com/file/d/0B8aYD2TJ472mQjZOMmg4djZfT1k/>`__
      from Google Drive to ``~/pcgr-X.X`` (replace *X.X* with the
      version number)
   -  Decompress and untar the bundle, e.g. through the following Unix
      command:
      ``gzip -dc pcgr.databundle.GRCh37.YYYYMMDD.tgz | tar xvf -``

   A *data/* folder within the *pcgr-X.X* software folder should now
   have been produced

-  Pull the `PCGR Docker
   image <https://hub.docker.com/r/sigven/pcgr/>`__ (3.5Gb) from
   DockerHub):

   -  ``docker pull sigven/pcgr`` (PCGR annotation engine)

Run test - generation of clinical report for a cancer genome
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A tumor sample report is generated by calling the Python script
**run\_pcgr.py**, which takes the following arguments and options:

::

    usage: run_pcgr.py [-h] [--input_vcf INPUT_VCF]
                   [--input_cna_segments INPUT_CNA_SEGMENTS]
                   [--logR_threshold_amplification LOGR_THRESHOLD_AMPLIFICATION]
                   [--logR_threshold_homozygous_deletion LOGR_THRESHOLD_HOMOZYGOUS_DELETION]
                   [--num_vcfanno_processes NUM_VCFANNO_PROCESSES]
                   [--num_vep_forks NUM_VEP_FORKS] [--force_overwrite]
                   pcgr_directory working_directory sample_id

    Personal Cancer Genome Reporter (PCGR) workflow for clinical interpretation of
    somatic nucleotide variants and copy number aberration segments

    positional arguments:
    pcgr_directory        PCGR base directory
    working_directory     Working directory - directory with input/output files
    sample_id             Tumor sample/cancer genome identifier - prefix for
                        output files

    optional arguments:
    -h, --help            show this help message and exit
    --input_vcf INPUT_VCF
                        VCF input file with somatic query variants
                        (SNVs/InDels) (default: None)
    --input_cna_segments INPUT_CNA_SEGMENTS
                        Somatic copy number alteration segments (tab-separated
                        values) (default: None)
    --logR_threshold_amplification LOGR_THRESHOLD_AMPLIFICATION
                        Log(2) ratio treshold for calling copy number
                        amplifications in HTML report (default: 0.8)
    --logR_threshold_homozygous_deletion LOGR_THRESHOLD_HOMOZYGOUS_DELETION
                        Log(2) ratio treshold for calling homozygous deletions
                        in HTML report (default: -0.8)
    --num_vcfanno_processes NUM_VCFANNO_PROCESSES
                        Number of processes used during vcfanno annotation
                        (default: 4)
    --num_vep_forks NUM_VEP_FORKS
                        Number of forks (--forks option in VEP) used during
                        VEP annotation (default: 4)
    --force_overwrite     By default, the script will fail with an error if any
                        output file already exists. You can force the
                        overwrite of existing result files by using this flag
                        (default: False)

The *examples* folder contain input files from two tumor samples
sequenced within TCGA. A report for a colorectal tumor case can be
generated by running the following command in your terminal window:

``python run_pcgr.py --input_vcf tumor_sample.COAD.vcf.gz --input_cna_segments``
``tumor_sample.COAD.cna.tsv ~/pcgr-X.X ~/pcgr-X.X/examples tumor_sample.COAD``

This command will run the Docker-based PCGR workflow and produce the
following output files in the *examples* folder:

1. **tumor\_sample.COAD.pcgr.html** - An interactive HTML report for
   clinical interpretation
2. **tumor\_sample.COAD.pcgr.vcf.gz** - VCF file with rich set of
   annotations for precision oncology
3. **tumor\_sample.COAD.pcgr.maf** - A basic MAF file for use as input
   in downstream analyses with other tools (e.g.
   `2020plus <https://github.com/KarchinLab/2020plus>`__, MutSigCV)
4. **tumor\_sample.COAD.pcgr.snvs\_indels.tiers.tsv** - Tab-separated
   values file with variants organized according to tiers of functional
   relevance
5. **tumor\_sample.COAD.pcgr.mutational\_signatures.tsv** -
   Tab-separated values file with estimated contributions by known
   mutational signatures and associated underlying etiologies
6. **tumor\_sample.COAD.pcgr.snvs\_indels.biomarkers.tsv** -
   Tab-separated values file with clinical evidence items associated
   with biomarkers for diagnosis, prognosis or drug
   sensitivity/resistance
7. **tumor\_sample.COAD.pcgr.cna\_segments.tsv.gz** - Tab-separated
   values file with annotations of gene transcripts that overlap with
   somatic copy number aberrations
